@model IEnumerable<CitraDataStore.Models.Agrodatos>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width" />
    <title>Graficos</title>
    <!-- Geoblaze -->
    <script src="~/npmlib/chart.js/dist/Chart.bundle.js"></script>
    <script src="~/npmlib/chartjs-plugin-zoom/dist/chartjs-plugin-zoom.js"></script>
    <script src="~/npmlib/hammerjs/hammer.js"></script>
    <script src="https://momentjs.com/downloads/moment.min.js"></script>

</head>


<body>
    <h1>Sistema de visualización de datos disponibles</h1>
    <div class="row">

        <div class="col-md-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Gráfico</h6>


                </div>
                <div class="card-body">
                    <canvas id="line-chart" width="600" height="300"></canvas>
                </div>
            </div>
        </div>

        <div class="col-md-5">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Completa el formulario</h6>
                </div>

                <div class="card-body">
                    <select id="select1" name="select1" class="form-control">
                        <option value=0>Selecionar una estación</option>
                        @foreach (var item in Model)
                        {
                            <option value=@Html.DisplayTextFor(modelItem => item.Id)> @Html.DisplayFor(modelItem => item.NombreEstacion)</option>
                        }
                    </select>

                    <span>Ingresar fecha de inicio</span>
                    <input type="date" id="fechaI" name="fechaI" class="form-control" placeholder="Fecha de inicio">

                    <span>Ingresar fecha de Termino</span>
                    <input type="date" id="fechaT" name="fechaT" class="form-control" placeholder="Fecha de Termino">

                </div>

                <div class="card-footer">
                    <button type="submit" class="btn btn-success" id="graficar" onclick="dibujarGrafico()">
                        <i class="fa fa-dot-circle-o"></i> Graficar
                    </button>

                    <button type="submit" class="btn btn-warning" id="descargaDatos" onclick="moveToDownload()">
                        <i class="fa fa-download"></i> Descargar Datos
                    </button>
                </div>
            </div>
        </div>

    </div>

</body>
</html>






<script>


    var ctx_live = document.getElementById("line-chart");

    var chart = new Chart(ctx_live, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                data: [],
                label: "Rad W/m2",
                fill: true,
                backgroundColor: 'rgba(0, 119, 204, 0.3)'
            }]
        },
        options: {
            title: {
                display: true,
                text: 'Valor de Radiacion Medido por piranometro al mediodia',
                fontSize: 16
            },
            legend: {
                position: 'top'
            },
            scales: {
                xAxes: [{
                    ticks: {
                        beginAtZero: true
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'DOY',
                        fontSize: 16
                    }
                }],
                yAxes: [{
                    ticks: {
                        min: 0,
                        max: 1200,
                        stepSize: 300,
                        beginAtZero: true
                    }
                }]
            },
            plugins: {
                zoom: {
                    // Container for pan options
                    pan: {
                        // Boolean to enable panning
                        enabled: true,

                        // Panning directions. Remove the appropriate direction to disable
                        // Eg. 'y' would only allow panning in the y direction
                        mode: 'x'
                    },

                    // Container for zoom options
                    zoom: {
                        // Boolean to enable zooming
                        enabled: true,

                        // Zooming directions. Remove the appropriate direction to disable
                        // Eg. 'y' would only allow zooming in the y direction
                        mode: 'x',
                    }
                }
            }
        }
    });



    function dibujarGrafico() {

        console.log("holamundo");

        var estacion = document.getElementById("select1").value; //id del imput de seleccion
        var fechaI = document.getElementById("fechaI").value;
        var fechaT = document.getElementById("fechaT").value;

        if (estacion <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'La estación no ha sido seleccionada.',
                text: 'Debe seleccionar una estación valida.'
            })
        }
        else {

            if (fechaI != "" && fechaT != "") {

                var fecha1 = moment(fechaI);
                var fecha2 = moment(fechaT);

                console.log("doy: ", fecha1.dayOfYear());

                var diasEntreFechas = fecha2.diff(fecha1, 'days');
                var diasDisponibles = @HttpContextAccessor.HttpContext.Session.GetInt32("dias_disponibles")

                console.log("comparar fechas", fechaI > fechaT)
                if (fechaI > fechaT) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Fechas Nulas',
                        text: 'Fecha de termino es anterior a la de inicio.'
                    })
                }

                if (diasDisponibles > 0 && diasEntreFechas > diasDisponibles) {

                    Swal.fire({
                        icon: 'warning',
                        title: 'Límite de días alcanzado',
                        text: 'Su cantidad maxima es de '+ diasDisponibles + ' días y supera su petición de '+diasEntreFechas+' días.'
                    })
                }

                else {

                    getSensorNames(estacion, fechaI, fechaT);
                    function getSensorNames(estacion, fechaI, fechaT) {
                        console.log("funcion y el id: " + estacion, fechaI, fechaT);
                        $.ajax(
                            {
                                type: "GET",
                                url: '@Url.Action("ValorPiranometro", "AgroDatos")',
                                data: {
                                    estacion: estacion,
                                    fechaI: fechaI,
                                    fechaT: fechaT
                                },
                                dataType: "json",
                                contentType: "application/json; charset=utf-8",
                                error: function (jqXHR, exception) {
                                    var msg = '';
                                    if (jqXHR.status === 0) {
                                        msg = 'Not connect.\n Verify Network.';
                                    } else if (jqXHR.status == 404) {
                                        msg = 'Requested page not found. [404]';
                                    } else if (jqXHR.status == 500) {
                                        msg = 'Internal Server Error [500].';
                                    } else if (exception === 'parsererror') {
                                        msg = 'Requested JSON parse failed.';
                                    } else if (exception === 'timeout') {
                                        msg = 'Time out error.';
                                    } else if (exception === 'abort') {
                                        msg = 'Ajax request aborted.';
                                    } else {
                                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                                    }
                                    alert("error");
                                    console.log(msg);
                                },
                                success: function (data, status, result, lista) {
                                    //console.log("length de los datos: ", data.datos.length());
                                    console.log("objetcta.values(data)", Object.values(data));
                                    console.log("cantidad de entradas: ", Object.values(data).length);
                                    //console.log("data: ", data[0].fecha)


                                    var labels = data.map(function (e) {
                                        return e.fecha;
                                    });
                                    var datos = data.map(function (e) {
                                        return e.valor;
                                    });

                                    for (var i = 0; i < diasEntreFechas + 1; i++) {
                                        //make sure we are not checking the last date in the labels array
                                        if (i + 1 < labels.length) {
                                            console.log("Inicio de todo. Fecha: "+labels[i]);
                                            var date1 = moment(labels[i], "DD-MM-YYYY");
                                            var date2 = moment(labels[i + 1], "DD-MM-YYYY");
                                            var lastDate = fecha2;
                                            console.log("tamaño de labels1: " + labels.length);


                                            var d1 = new Date(fecha1);
                                            var dn = new Date(lastDate);
                                            var d2 = new Date(fecha1 + ((24 * 60 * 60 * 1000) * (i + 1)));
                                            console.log("d1: " + d1);
                                            console.log("d2: " + d2);

                                            //if the current date +1 is not the same as it's next neighbor we have to add in a new one
                                            if (!date1.add(1, "days").isSameOrAfter(date2)) {

                                                console.log("te digo que esta fecha")
                                                console.log(date1);
                                                console.log("no es igual a");
                                                console.log(date2);
                                                //var indice = i + 1;
                                                //console.log("fecha agregada: " + date1.toString() + " indice: " + indice);
                                                //add the label
                                                labels.splice(i + 1, 0, date1.format("DD-MM-YYYY"));
                                                //add the data
                                                datos.splice(i + 1, 0, null);
                                                //console.log("tamaño de labels2: " + labels.length);
                                            }
                                            else if (d2 < dn) {
                                                console.log("fecha siguiente a la actual es menor a la fecha final");
                                            }
                                        }
                                        console.log("tamaño de labels3: " + labels.length);
                                    }



                                    console.log("tamaño de labels4: " + labels.length);

                                    for (var j = 0; j < diasEntreFechas + 1; j++) {
                                        //var f = fecha1.subtract(1, "day");
                                        var ff = fecha1
                                        console.log("labels fin: " + labels[j]+ " j: "+j);
                                        labels[j] = ff.dayOfYear();
                                        ff = ff.add(1, "day");
                                    }
                                    //labels = labels.slice(0, diasEntreFechas+1)


                                    //Actualizacion del grafico
                                    chart.data.labels = labels;
                                    chart.data.datasets[0].data = datos;
                                    chart.update();
                                    console.log(labels);
                                    console.log(datos);


                                    //Alertas de los datos obtenidos
                                    if (diasEntreFechas + 1 != Object.values(data).length) {
                                        var diferencia = (diasEntreFechas + 1) - Object.values(data).length
                                        Swal.fire({
                                            icon: 'warning',
                                            title: 'Datos incompletos',
                                            text: 'Hay perdida de ' +diferencia+' '+' datos en el intervalo de fechas',
                                            footer: 'Pruebe con un nuevo intervalo o comuniquese con el Admin.'
                                        })
                                        console.log("Dias entre fecha: ", diasEntreFechas, "cantidad de entradas: ", Object.values(data).length)
                                    }
                                    else {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Datos completos',
                                            text: 'Todos los datos del intervalo están disponibles.'
                                        })
                                        console.log("Dias entre fecha: ", diasEntreFechas, "cantidad de entradas: ", Object.values(data).length)
                                    }
                                    //alert(Object.values(data) + "\nStatus: " + status);
                                    //console.log(data.length);
                                }
                            } )
                    }
                }

            }

            else {
                Swal.fire({
                    icon: 'error',
                    title: 'Fechas Nulas',
                    text: 'Debe ingresar una fecha de inicio y de termino.'
                })
            }

        }



    }

    function moveToDownload()
    {
        window.location.href = '@Url.Action("Datos", "Agrodatos")';
    }






</script>
