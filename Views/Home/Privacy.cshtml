@model ViewModel
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Mapa de prueba";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Tiled WMS</title>
    <link rel="stylesheet" href="https://openlayers.org/en/v5.3.0/css/ol.css" type="text/css">
    <!-- The line below is only needed for old environments like Internet Explorer and Android 4.x -->
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL"></script>
    <script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js"></script>
    <script src="https://unpkg.com/d3-regression@1.3.4/dist/d3-regression.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/geotiff"></script>
    <script src="https://momentjs.com/downloads/moment.min.js"></script>
    <script src="~/npmlib/chart.js/dist/Chart.bundle.js"></script>
    <script src="~/npmlib/chartjs-plugin-zoom/dist/chartjs-plugin-zoom.js"></script>
    <script src="~/npmlib/hammerjs/hammer.js"></script>

</head>

<body>
    <h4>Mapa de pruebas</h4>
    <div class="row">
        <div class="col-md-8">
            <div class="card shadow mb-4">
                <div class="card-header"><h5>Mapa</h5></div>
                <div class="card-body">
                    <div class="panel panel-primary">
                        <div class="panel-body">
                            <div id="map" class="map"></div>
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <div class="row">

                        <label>Coordenadas:</label>
                        <div class="col-md-3" id="mouse-position"></div>

                        <div clas="col-md-2">
                            <label>Proyección</label>
                            <select id="projection">
                                <option value="EPSG:4326">EPSG:4326</option>
                                <option value="EPSG:3857">EPSG:3857</option>
                                <option value="EPSG:32719">EPSG:32719</option>
                            </select>
                        </div>

                        <div clas="col-md-3">
                            <label>Precisión</label>
                            <input id="precision" type="number" min="0" max="12" value="4" />
                        </div>

                        <button type="button" id="set-source" class="btn btn-success">Mostrar poligono de procesos</button>
                        <button type="button" id="unset-source" class="btn btn-warning">Esconder poligono de procesos</button>

                    </div>
                </div>
            </div>
        </div>


        <div class="col-md-4">
            <div class="card shadow mb-4">
                <div class="card-header">
                    <h4>Herramientas de Mapa</h4>
                </div>
                <div class="card-body">
                    <div class="container-fluid">
                        <div class="col">

                            <div clas="row-md-2">
                                <h5>Control de Figuras</h5>
                                <div class="btn-group d-flex" role="group">
                                    <button type="button" id="b1" value="btn1" onclick="addInteraction();" class="btn btn-outline-primary">Dibujar</button>
                                    <button type="button" id="b2" value="btn2" onclick="removeInteraction();" class="btn btn-warning ">Terminar</button>
                                    <button type="button" id="b3" value="btn3" onclick="deletePoly();" class="btn btn-danger">Borrar</button>
                                </div>
                                <hr />
                                <button type="button" id="savePol" onclick="guardarPoligono()" class="btn btn-outline-success"><i class="fas fa-save"></i>  Guardar</button>
                                <button type="button" id="loadPol" onclick="cargarPoligono()" class=" btn btn-outline-success" style="float: right"><i class="fas fa-upload"></i>  Cargar</button>


                            </div>

                            <hr />

                            <div clas="row-md-2">
                                <h5>Indicadores</h5>
                                <div class="form-group">
                                    <label for="Select1">Elige un indicador</label>
                                    <select class="form-control" id="Select1">
                                        <option value="ET24">ETa</option>
                                        <option value="LAI">LAI</option>
                                        <option value="NDVI">NDVI</option>
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label for="Select2">Elige un año</label>
                                    <select class="form-control" id="Select2">
                                        <option value="2008">2008</option>
                                        <option value="2009">2009</option>
                                        <option value="2010">2010</option>
                                    </select>
                                </div>

                            </div>

                            <hr />

                            <div clas="row-md-2">
                                <h5>Operaciónes</h5>
                                <div class="btn-group d-flex" role="group">
                                    <button type="button" id="save" onclick="printpoly()" class="btn btn-outline-primary"><i class="fas fa-calculator"></i>Valor diario</button>
                                    <button type="button" id="sum" onclick="pruebaRegresion()" class="btn btn-outline-secondary"><i class="fas fa-chart-line"></i>Valor Anual</button>
                                </div>

                            </div>

                            <hr />

                            <div clas="row-md-2">
                                <form class="form-inline">
                                    <label>Tipo de Geometria &nbsp;</label>
                                    <select id="type">
                                        <option value="Point">Punto</option>
                                        <option value="Polygon">Polígono</option> 
                                        <option value="None">Nada</option>
                                        <!--

    <option value="LineString">LineString</option>
    <option value="Circle">Circle</option>
    -->
                                    </select>
                                </form>
                            </div>

                        </div>
                    </div>

                    <footer class="blockquote-footer">
                        <small class="text-muted">
                            Someone famous in <cite title="Source Title">Source Title</cite>
                        </small>
                    </footer>

                </div>
            </div>
        </div>
    </div>
    


    <div id="one">
        <canvas id="myChart" width="4" height="2"></canvas>
    </div>

    <div id="two">
        <canvas id="myChart2" width="4" height="2"></canvas>
    </div>
</body>
</html>

<script>


    $("#two").hide();
    $("#one").hide();
    $("#sum").click(function () {
        $("#two").hide();
        $("#one").show();
    });

    $("#save").click(function () {
        $("#two").show();
        $("#one").hide();
    });

    var anio = document.getElementById('Select2').value;
    var indicador = document.getElementById('Select1').value;
    

    var ctx_live = document.getElementById("myChart");
    var chart1 = new Chart(ctx_live, {
        type: 'line',
        data: {
            labels: [],
            datasets: [
                {
                    data: [],
                    label: indicador,
                    fill: true,
                    backgroundColor: 'rgba(0, 119, 204, 0.3)'
                },
            ]
        },
        options: {
            title: {
                display: true,
                text: 'Evapotranspiración diaria',
                fontSize: 16
            },
            legend: {
                position: 'top'
            },
            scales: {
                xAxes: [{
                    ticks: {
                        beginAtZero: true
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'DOY',
                        fontSize: 16
                    }
                }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            plugins: {
                zoom: {
                    // Container for pan options
                    pan: {
                        // Boolean to enable panning
                        enabled: true,

                        // Panning directions. Remove the appropriate direction to disable
                        // Eg. 'y' would only allow panning in the y direction
                        mode: 'x'
                    },

                    // Container for zoom options
                    zoom: {
                        // Boolean to enable zooming
                        enabled: true,

                        // Zooming directions. Remove the appropriate direction to disable
                        // Eg. 'y' would only allow zooming in the y direction
                        mode: 'x',
                    }
                }
            }
        }
    });


    var ctx2 = document.getElementById("myChart2");
    var chart = new Chart(ctx2, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [
                {
                    data: [],
                    label: indicador,
                    fill: true,
                    backgroundColor: 'rgba(0, 119, 204, 0.3)'
                },

            ]
        },
        options: {
            title: {
                display: true,
                text: 'Evapotranspiración diaria',
                fontSize: 16
            },
            legend: {
                position: 'top'
            },
            scales: {
                xAxes: [{
                    ticks: {
                        beginAtZero: true
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'DOY',
                        fontSize: 16
                    }
                }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            plugins: {
                zoom: {
                    // Container for pan options
                    pan: {
                        // Boolean to enable panning
                        enabled: true,

                        // Panning directions. Remove the appropriate direction to disable
                        // Eg. 'y' would only allow panning in the y direction
                        mode: 'x'
                    },

                    // Container for zoom options
                    zoom: {
                        // Boolean to enable zooming
                        enabled: true,

                        // Zooming directions. Remove the appropriate direction to disable
                        // Eg. 'y' would only allow zooming in the y direction
                        mode: 'x',
                    }
                }
            }
        }
    });



    async function pruebaRegresion() {



        //var arrTest = [5.1, 4.9, 4.5, 3.2, 3.1, 2.9, 2.5, 3.1, 3.6, 3.9, 4.2, 4.8, 5];
        //var doyTest = [1, 32, 63, 94, 121, 153, 182, 210, 250, 290, 310, 330, 360];
        //data = [[1, 5.1], [32, 4.9], [63, 4.5], [94, 3.2], [121, 3.1], [153, 2.9], [182, 2.5], [210, 3.1], [250, 3.6], [290, 3.9], [310, 4.2], [330, 4.8], [360, 5]]
        var nFig = vector.getSource().getFeatures().length;

        if (nFig == 0) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Debe dibujar una figura antes de realizar una operación.'
            })
        }

        else {

        


        var anio = document.getElementById('Select2').value;
        var indicador = document.getElementById('Select1').value;

        var geoLayer = indicador + "stack" + anio;

        var values = [];
        var keys = "";

        var nFiguras = vector.getSource().getFeatures().length;
        if (nFiguras > 0) {

            var interaction = vector.getSource().getFeatures()[0];
            var newfeat = interaction.clone();
            var transform = newfeat.getGeometry().transform('EPSG:3857', "EPSG:32719");
            var coord = newfeat.getGeometry().getCoordinates();

            console.log("coordenadas regresion: ", coord);
            console.log("coordenadas regresion transform: ", transform);

        }
        var interaction = vector.getSource().getFeatures()[0];
        var newfeat = interaction.clone();
        var transform = newfeat.getGeometry().transform('EPSG:3857', "EPSG:32719");
        var coord = newfeat.getGeometry().getCoordinates();

        console.log("coordenadas regresion: ", coord);
        var cX = (coord[0]-0.1).toString();
        var cY = (coord[1]-0.1).toString();
        var ccX = (coord[0]+0.1).toString();
        var ccY = (coord[1]+0.1).toString();
        console.log(cX, cY, ccX, ccY);
        console.log("coordenadas regresion transform: ", transform);

        const proxyurl = "https://cors-anywhere.herokuapp.com/";
        var funk = proxyurl+"http://biovisionagricola.cl:8080/geoserver/Mili/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetFeatureInfo&FORMAT=image/jpeg&QUERY_LAYERS=Mili:"+geoLayer+"&STYLES&LAYERS=Mili:"+geoLayer+"&exceptions=application/vnd.ogc.se_inimage&INFO_FORMAT=application/json&FEATURE_COUNT=50&X=50&Y=50&SRS=EPSG:32719&WIDTH=101&HEIGHT=101&BBOX=" + cX + "," + cY + "," + ccX + "," + ccY;    //263794.29767469596,6017642.936587741,279217.292780405,6033065.931693451";
        //var funk = "http://localhost:8080/geoserver/Mili/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetFeatureInfo&FORMAT=image/jpeg&QUERY_LAYERS=Mili:stack2009&STYLES&LAYERS=Mili:stack2009&exceptions=application/vnd.ogc.se_inimage&INFO_FORMAT=application/json&FEATURE_COUNT=50&X=50&Y=50&SRS=EPSG:32719&WIDTH=101&HEIGHT=101&BBOX=" + cX + "," + cY + "," + ccX + "," + ccY;    //263794.29767469596,6017642.936587741,279217.292780405,6033065.931693451";

        Swal.fire({
            title: 'Cargando datos desde Geoserver, esto tomará un tiempo.',
            didOpen: function () {
                Swal.showLoading()


        var valoresGeoserver = $.ajax({
            url: funk,
            dataType: 'json',
            error: function (jqXHR, exception) {
                var msg = '';
                if (jqXHR.status === 0) {
                    msg = 'Not connect.\n Verify Network.';
                } else if (jqXHR.status == 404) {
                    msg = 'Requested page not found. [404]';
                } else if (jqXHR.status == 500) {
                    msg = 'Internal Server Error [500].';
                } else if (exception === 'parsererror') {
                    msg = 'Requested JSON parse failed.';
                } else if (exception === 'timeout') {
                    msg = 'Time out error.';
                } else if (exception === 'abort') {
                    msg = 'Ajax request aborted.';
                } else {
                    msg = 'Uncaught Error.\n' + jqXHR.responseText;
                }
            },
            success: function (data) {



                console.log("data desde geoserver: ", data),
                    console.log("algo: ", data["features"][0]["properties"].toString()),
                    console.log(JSON.stringify(data["features"][0]["properties"])),
                    stringg = JSON.parse(JSON.stringify(data["features"][0]["properties"]))

                values = Object.values(stringg);
                keys = Object.keys(stringg);

                for (i = 0; i < keys.length; i++) {
                    var s = keys[i].split(".")[1];
                    //console.log(s);
                    var fecha1 = moment(s, "DD-MM-YYYY");
                    //console.log(fecha1);

                    //console.log("doy: ", fecha1.dayOfYear());
                    keys[i] = fecha1.dayOfYear();
                }

                var yesy = [];
                for (i = 0; i < keys.length; i++) {
                    yesy[i] = {
                        doy: keys[i],
                        valor: values[i]
                    };
                }
                console.log("ahorasi: ", yesy);



                regression = d3.regressionPoly()
                    .x(yesy => yesy.doy)
                    .y(yesy => yesy.valor)
                    .order(5);
                regressionOutput = regression(yesy);
                //console.log(yesy);
                //console.log(regressionOutput);

                /*
                var ctx_live = document.getElementById("line-chart");
                if (chart) {
                    chart.destroy();
                }

                var chart = new Chart(ctx_live, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [
                            {
                                data: [],
                                label: "ET24",
                                fill: true,
                                backgroundColor: 'rgba(0, 119, 204, 0.3)'
                            },

                            {
                                data: [],
                                label: "puntos originales",
                                fill: false,
                                backgroundColor: 'rgba(255, 0, 0, 0.5)'
                            }
                        ]
                    },
                    options: {
                        title: {
                            display: true,
                            text: 'Evapotranspiración diaria',
                            fontSize: 16
                        },
                        legend: {
                            position: 'top'
                        },
                        scales: {
                            xAxes: [{
                                ticks: {
                                    beginAtZero: true
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: 'DOY',
                                    fontSize: 16
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        },
                        plugins: {
                            zoom: {
                                // Container for pan options
                                pan: {
                                    // Boolean to enable panning
                                    enabled: true,

                                    // Panning directions. Remove the appropriate direction to disable
                                    // Eg. 'y' would only allow panning in the y direction
                                    mode: 'x'
                                },

                                // Container for zoom options
                                zoom: {
                                    // Boolean to enable zooming
                                    enabled: true,

                                    // Zooming directions. Remove the appropriate direction to disable
                                    // Eg. 'y' would only allow zooming in the y direction
                                    mode: 'x',
                                }
                            }
                        }
                    }
                });*/

                //console.log(regressionOutput.length);
                var indices = [];
                for (var i = 1; i < regressionOutput.length; i++) {
                    //console.log(regressionOutput[i]);
                    //console.log(Math.trunc(regressionOutput[i - 1][0]), Math.trunc(regressionOutput[i][0]));
                    if (Math.trunc(regressionOutput[i - 1][0]) == Math.trunc(regressionOutput[i][0])) {
                        indices[i] = i;
                        //console.log(delete(regressionOutput[i]));
                    }
                }
                //console.log(regressionOutput);
                //console.log("indices: " + indices);
                for (var i = 0; i < indices.length; i++) {
                    if (indices[i] != null) {
                        regressionOutput.splice(indices[i], 1);
                    }
                }
                //console.log("borrado " + regressionOutput);

                var datos = [regressionOutput.length];
                var suma = 0;
                for (var j = 0; j < regressionOutput.length; j++) {
                    if (regressionOutput[j] != null) {
                        datos[j] = regressionOutput[j][1];
                        suma = suma + regressionOutput[j][1];
                    }

                }


                //console.log("asd" + regressionOutput[j][1]);


                var labels = [regressionOutput.length];
                for (var j = 0; j <= 360; j++) {
                    if (regressionOutput[j] != null) {
                        labels[j] = j;
                    }


                }

                //console.log("asd" + regressionOutput[j][1]);

                chart1.data.labels = labels;
                chart1.data.datasets[0].data = datos;
                chart1.data.datasets[0].label = indicador;

                /*
                console.log(datos);
                console.log(labels);

                chart.data.datasets[1].data = [5.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 4.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 4.5,
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 3.2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    3.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    2.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    2.5, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    3.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    3.6, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    3.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    4.2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    4.8, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    5];*/
                chart1.update();
                Swal.close()

                if (indicador == "ET24") {
                    Swal.fire({
                        icon: 'success',
                        title: 'Suma total',
                        text: 'Consumo hidrico: ' + suma
                    })
                }
                else {

                    Swal.fire({
                        icon: 'success',
                        title: 'Operación realizada con éxito',
                        text: 'Regresión de ' + indicador
                    })

                }


            }
        });
        // AJAX request simulated with setTimeout

        }
     })

        }
    }



    const pro = proj4.defs("EPSG:32719", "+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs");
    ol.proj.proj4.register(proj4);

    //Coordenada del mapa desde el cursor
    var mousePositionControl = new ol.control.MousePosition({
        coordinateFormat: ol.coordinate.createStringXY(4),
        projection: 'EPSG:4326',
        // comment the following two lines to have the mouse position
        // be placed within the map.
        className: 'custom-mouse-position',
        target: document.getElementById('mouse-position'),
        undefinedHTML: '&nbsp;'
    });

    //Mapa Satelital
    var raster = new ol.layer.Tile({
        opacity: 0.7,
        proyection: 'EPSG:32719',
        source: new ol.source.XYZ({
            attributions: ['Powered by Esri',
                'Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community'],
            attributionsCollapsible: false,

            url: 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
            proyection: 'EPSG:32719',
            maxZoom: 23

        })
    });

    //imagen Satelital (Se debe modificar para ir cambiando por fecha)

    var corteSource = new ol.source.TileWMS({
        url: 'http://biovisionagricola.cl:8080/geoserver/Mili/wms?',
        params: { 'LAYERS': 'Mili:Corte' },
        proyection: 'EPSG:32719',
        serverType: 'geoserver',

        // Countries have transparency, so do not fade tiles:
        transition: 0
    })

    var landsat = new ol.layer.Tile({
        opacity: 0.4,
        proyection: 'EPSG:32719',
        source: corteSource
    });



    document.getElementById('set-source').onclick = function () {
        landsat.setSource(corteSource);
    };

    document.getElementById('unset-source').onclick = function () {
        landsat.setSource(null);
    };

    var tiff_de_geos = new ol.layer.Tile({
        proyection: 'EPSG:32719',
        source: new ol.source.TileWMS({
            url: 'http://localhost:8080/geoserver/localhost/wms?',
            params: { 'LAYERS': 'localhost:LC08_L1TP_233086_20131005_20170429_01_T1_sr_ndvi', 'FORMAT': 'image/tiff' },
            proyection: 'EPSG:32719',
            serverType: 'geoserver'
        })
    });

    var projectionSelect = document.getElementById('projection');
    projectionSelect.addEventListener('change', function (event) {
        mousePositionControl.setProjection(event.target.value);
    });

    var precisionInput = document.getElementById('precision');
    precisionInput.addEventListener('change', function (event) {
        var format = ol.coordinate.createStringXY(event.target.valueAsNumber);
        mousePositionControl.setCoordinateFormat(format);
    });

    //Mapa plano con calles
    var street = new ol.layer.Tile({ source: new ol.source.OSM() });



    //Vector para guardar los poligonos.
    var source = new ol.source.Vector({
        proyection: 'EPSG:3857'
    })

    //capa para agregar los vectores
    var vector = new ol.layer.Vector({
        source: source,
        proyection: 'EPSG:3857'
    });


    //"Constructor" del elemento mapa, Se le agregan las capas de satelite, imagen, y calle. Asi como tambien el vector
    // donde son guardados los poligonos.
    var map = new ol.Map({
        pixelRatio: 1,
        layers: [street, raster, landsat, vector],
        target: 'map',
        controls: ol.control.defaults().extend([mousePositionControl]),
        view: new ol.View({
            proyection: 'EPSG:32719',
            center: ol.proj.fromLonLat([-71.60, -35.40]),
            zoom: 10
        })
    });

    var typeSelect = document.getElementById('type');
    var sumaaa;
    var geo;

    var ondrawend = async function (e) {
        console.log(e.feature.getGeometry());
        var allfeat = vector.getSource().getFeatures();
        console.log("allfeats: ", allfeat);
    };

    var draw; // global so we can remove it later
    function addInteraction() {
        var value = typeSelect.value;
        if (value !== 'None') {
            draw = new ol.interaction.Draw({
                source: source,
                type: typeSelect.value
            });
            draw.on('drawend', function(evt) {
                //... unset sketch
                map.removeInteraction(draw);
            }, this);
            map.addInteraction(draw);
            console.log("hallo");
        }
    }

    function removeInteraction() {
        map.removeInteraction(draw);
    }

    // Habilita/desabilida los botones para dibujar poligonos
    function disableB2() {
        document.getElementById("b1").disabled = false;
        document.getElementById("b2").disabled = true;
    }
    function disableB1() {
        document.getElementById("b1").disabled = true;
        document.getElementById("b2").disabled = false;
    }


    function deletePoly() {
        var features = vector.getSource().getFeatures();
        features.forEach((feature) => {
            vector.getSource().removeFeature(feature);
        });
    }


    /**
        * Handle change event.
        */
    typeSelect.onchange = function () {
        map.removeInteraction(draw);
        addInteraction();
    };

    async function printpoly() {

        /*
        var funk = "http://localhost:8080/geoserver/Mili/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetFeatureInfo&FORMAT=image/jpeg&QUERY_LAYERS=Mili:stack2009&STYLES&LAYERS=Mili:stack2009&exceptions=application/vnd.ogc.se_inimage&INFO_FORMAT=application/json&FEATURE_COUNT=50&X=50&Y=50&SRS=EPSG:32719&WIDTH=101&HEIGHT=101&BBOX=263794.29767469596,6017642.936587741,279217.292780405,6033065.931693451";
        var valoresGeoserver = $.ajax({
            url: funk,
            dataType: 'json',
            error: function (jqXHR, exception) {
                var msg = '';
                if (jqXHR.status === 0) {
                    msg = 'Not connect.\n Verify Network.';
                } else if (jqXHR.status == 404) {
                    msg = 'Requested page not found. [404]';
                } else if (jqXHR.status == 500) {
                    msg = 'Internal Server Error [500].';
                } else if (exception === 'parsererror') {
                    msg = 'Requested JSON parse failed.';
                } else if (exception === 'timeout') {
                    msg = 'Time out error.';
                } else if (exception === 'abort') {
                    msg = 'Ajax request aborted.';
                } else {
                    msg = 'Uncaught Error.\n' + jqXHR.responseText;
                }
            },
            success: function (data) {
                console.log("data desde geoserver: ", data),
                    console.log("algo: ", data["features"][0]["properties"].toString()),
                    console.log(JSON.stringify(data["features"][0]["properties"])),
                    stringg = JSON.parse(JSON.stringify(data["features"][0]["properties"])),
                    console.log("arreglo? ", Object.values(stringg)),
                    console.log("llaves ", Object.keys(stringg))



                

            }
        });
        */
        var nFiguras = vector.getSource().getFeatures().length;
        if (nFiguras == 0) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Debe dibujar una figura antes de realizar una operación.'
            })
        }
        else {

        

        var values = [];
        var keys = "";

        
        if (nFiguras > 0) {

            var interaction = vector.getSource().getFeatures()[0];
            var newfeat = interaction.clone();
            var transform = newfeat.getGeometry().transform('EPSG:3857', "EPSG:32719");
            var coord = newfeat.getGeometry().getCoordinates();

            console.log("coordenadas regresion: ", coord);
            console.log("coordenadas regresion transform: ", transform);


            /*
            var urlGeosrv = "http://localhost:8080/geoserver/Mili/wms?";

            var parameters = {
                service: 'WMS',
                version: '1.1.1',
                request: 'GetFeatureInfo',
                layers: 'Mili:stack2009',
                query_layers: 'Mili:stack2009',
                feature_count: 10,
                info_format: 'text/javascript',
                format_options: 'callback:handleJson',
                SRS: 'EPSG: 32719',
                width: 101,
                height: 101,
                x: 50,
                y: 50,
                bbox: (coord[0]) + ',' + (coord[1])
            };
            var url = urlGeosrv + L.Util.getParamString(parameters);
            console.log("url: ", url);
            $.ajax({
                url: urlGeosrv + L.Util.getParamString(parameters),
                dataType: 'jsonp',
                success: function (data) {
                    handleJson(data)
                }
            });

            */
        }

        var anio = document.getElementById('Select2').value;
        var indicador = document.getElementById('Select1').value;

        var geoLayer = indicador + "stack" + anio;

        var interaction = vector.getSource().getFeatures()[0];
        var newfeat = interaction.clone();
        var transform = newfeat.getGeometry().transform('EPSG:3857', "EPSG:32719");
        var coord = newfeat.getGeometry().getCoordinates();

        console.log("coordenadas regresion: ", coord);
        var cX = (coord[0] - 0.1).toString();
        var cY = (coord[1] - 0.1).toString();
        var ccX = (coord[0] + 0.1).toString();
        var ccY = (coord[1] + 0.1).toString();
        console.log(cX, cY, ccX, ccY);
        console.log("coordenadas regresion transform: ", transform);

        const proxyurl = "https://cors-anywhere.herokuapp.com/";
        var funk = proxyurl + "http://biovisionagricola.cl:8080/geoserver/Mili/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetFeatureInfo&FORMAT=image/jpeg&QUERY_LAYERS=Mili:" + geoLayer + "&STYLES&LAYERS=Mili:" + geoLayer + "&exceptions=application/vnd.ogc.se_inimage&INFO_FORMAT=application/json&FEATURE_COUNT=50&X=50&Y=50&SRS=EPSG:32719&WIDTH=101&HEIGHT=101&BBOX=" + cX + "," + cY + "," + ccX + "," + ccY;    //263794.29767469596,6017642.936587741,279217.292780405,6033065.931693451";

        Swal.fire({
            title: 'Cargando datos desde Geoserver, esto tomará un tiempo.',
            didOpen: function () {
                Swal.showLoading()


        var valoresGeoserver = $.ajax({
            url: funk,
            dataType: 'json',
            error: function (jqXHR, exception) {
                var msg = '';
                if (jqXHR.status === 0) {
                    msg = 'Not connect.\n Verify Network.';
                } else if (jqXHR.status == 404) {
                    msg = 'Requested page not found. [404]';
                } else if (jqXHR.status == 500) {
                    msg = 'Internal Server Error [500].';
                } else if (exception === 'parsererror') {
                    msg = 'Requested JSON parse failed.';
                } else if (exception === 'timeout') {
                    msg = 'Time out error.';
                } else if (exception === 'abort') {
                    msg = 'Ajax request aborted.';
                } else {
                    msg = 'Uncaught Error.\n' + jqXHR.responseText;
                }
            },
            success: function (data) {
                console.log("data desde geoserver: ", data),
                    console.log("algo: ", data["features"][0]["properties"].toString()),
                    console.log(JSON.stringify(data["features"][0]["properties"])),
                    stringg = JSON.parse(JSON.stringify(data["features"][0]["properties"]))

                values = Object.values(stringg);
                keys = Object.keys(stringg);

                for (i = 0; i < keys.length; i++) {
                    var s = keys[i].split(".")[1];
                    //console.log(s);
                    var fecha1 = moment(s, "DD-MM-YYYY");
                    //console.log(fecha1);

                    //console.log("doy: ", fecha1.dayOfYear());
                    keys[i] = fecha1.dayOfYear();
                }

                var yesy = [];
                for (i = 0; i < keys.length; i++) {
                    yesy[i] = {
                        doy: keys[i],
                        valor: values[i]
                    };
                }
                console.log("ahorasi: ", yesy);


                /*
                var ctx_live = document.getElementById("line-chart");
                if (chart) {
                    chart.destroy();
                }
                
                var chart = new Chart(ctx_live, {
                    type: 'bar',
                    data: {
                        labels: [],
                        datasets: [
                            {
                                data: [],
                                label: "ET24",
                                fill: true,
                                backgroundColor: 'rgba(0, 119, 204, 0.3)'
                            },

                        ]
                    },
                    options: {
                        title: {
                            display: true,
                            text: 'Evapotranspiración diaria',
                            fontSize: 16
                        },
                        legend: {
                            position: 'top'
                        },
                        scales: {
                            xAxes: [{
                                ticks: {
                                    beginAtZero: true
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: 'DOY',
                                    fontSize: 16
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        },
                        plugins: {
                            zoom: {
                                // Container for pan options
                                pan: {
                                    // Boolean to enable panning
                                    enabled: true,

                                    // Panning directions. Remove the appropriate direction to disable
                                    // Eg. 'y' would only allow panning in the y direction
                                    mode: 'x'
                                },

                                // Container for zoom options
                                zoom: {
                                    // Boolean to enable zooming
                                    enabled: true,

                                    // Zooming directions. Remove the appropriate direction to disable
                                    // Eg. 'y' would only allow zooming in the y direction
                                    mode: 'x',
                                }
                            }
                        }
                    }
                });*/
                

                //console.log("asd" + regressionOutput[j][1]);

                var labels = keys;
                var datos = values;

                // Remove the old chart and all its event handles
                

                chart.data.labels = keys;
                chart.data.datasets[0].data = values;
                chart.data.datasets[0].label = indicador;


                chart.update();
                Swal.close()

                Swal.fire({
                    icon: 'success',
                    title: 'Resultados',
                    text: indicador
                })




            }
        });

            }
        })

        /*
        var nFiguras = vector.getSource().getFeatures().length;
        if (nFiguras > 0) {

            var interaction = vector.getSource().getFeatures();
            interaction.forEach(async function (feature) {
                //var newgeo = feature;
                //newgeo.getGeometry().transform('EPSG:3857', "EPSG:32719");
                var newfeat = feature.clone();
                var transform = newfeat.getGeometry().transform('EPSG:3857', "EPSG:32719");
                var coord = newfeat.getGeometry().getCoordinates();

                //var workspace = layer.params.LAYERS.split(':');
                // var downloadurl = "http://localhost:8080/geoserver/" + workspace[0] + "/wcs?service=WCS&version=2.0.1&request=GetCoverage&CoverageId=" + layer.params.LAYERS + "&format=image/tiff"
                //window.open(downloadurl);





                console.log("poligono: " + coord);
                //coord = ol.proj.transform(coord, 'EPSG:32719', 'EPSG:4326');

                //const img = await geoblaze.load("https://citrads.biovisionagricola.cl/ET_24_reproj.tif");
                //stackRaster 1vNUbsv5KXyvDBIYgWD_7pusdtOg6x8wh
                /*
    
                var linkEt24 = [];
    
    
                
                linkEt24[0] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbmxsN0Y2aGY5OGw4R0FXP2U9bWttWEFx/root/content";
                linkEt24[1] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbnFQdzdJYXVNTGwwZEhqP2U9RXZ2RHNy/root/content";
                linkEt24[2] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbnVJbUxfVFd3Tjk1OEVmP2U9bXZCeTBz/root/content";
                linkEt24[3] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbnhFV08zUk1qOVZzajF3P2U9SldyOU12/root/content";
                linkEt24[4] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbjFaZGlid1phVWk3OXl6P2U9UmZKa0Fr/root/content";
                linkEt24[5] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbjZxbWoyMlJ3N1N4NnY1P2U9b0tSc2xB/root/content";
                linkEt24[6] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpbjl4LXN3cGNZcnhNSGdNP2U9ZTRQWmxu/root/content";
                linkEt24[7] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd0E1NnhiWjNkdTQ0UFVRP2U9VHZHbEZp/root/content";
                linkEt24[8] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd0ZQdTA2UkF2TVI5NEttP2U9WFhmd0xC/root/content";
                linkEt24[9] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd0xYckpqcVc0elhkNEtBP2U9bGN5WFVk/root/content";
                linkEt24[10] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd053MV92dnh5QnZfYUxxP2U9eWV6TWhC/root/content";
                linkEt24[11] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd1FFNVZjdlNyT21NZDRvP2U9eFk3bU54/root/content";
                linkEt24[12] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd1ZJWDBYY2NUTlVfWUtJP2U9d1JFSnRj/root/content";
                linkEt24[13] = "https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd1lFckdLNTFNbVZsVC1NP2U9OU5CM2gw/root/content";
    
                
                var valores=[];
    
                for (m = 0; m < linkEt24.length; m++) {
                    const img = await geoblaze.load(linkEt24[m]);
                    valores[m] = geoblaze.identify(img, coord);
                }
    
                console.log("lista: "+valores)
                */



                /*
                var url_to_geotiff_file = "https://drive.google.com/u/0/uc?export=download&confirm=KkM4&id=1vNUbsv5KXyvDBIYgWD_7pusdtOg6x8wh";
    
                const response = await fetch("https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpblpSTXlXNUxFX0MzNktqP2U9S1JJVmNv/root/content");
                console.log(response);
                const arrayBuffer = await response.arrayBuffer();
                console.log(arrayBuffer);
                const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);
                console.log(tiff);
                */

                //const img = await geoblaze.load("https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpblpSTXlXNUxFX0MzNktqP2U9S1JJVmNv/root/content");
        /*
                const img = await geoblaze.load("http://localhost:8080/geoserver/localhost/wms?service=WMS&version=1.1.0&request=GetMap&layers=localhost:Ts&bbox=64051.700592833,4191661.52438661,195811.700592833,4308241.52438661&width=768&height=679&srs=EPSG:32611&format=image/geotiff");
                var sumaaa = geoblaze.sum(img);
                console.log("sm original: ", sumaaa);
                var lonlat = [223885.153852, 5786947.319458];
                var sum = geoblaze.identify(img, lonlat);
                console.log("sm crop: ", sum);
                console.log("img raster: ", img);

                var swissCoord = ol.proj.transform(lonlat, 'EPSG:4326', 'EPSG:32719');
                console.log("transform: ", swissCoord)
                //swissCoord = ol.proj.transform(lonlat, 'EPSG:32719', 'EPSG:4326');
                console.log("transform 4326: ", swissCoord)
                //swissCoord = ol.proj.transform(lonlat, 'EPSG:4326', 'EPSG:32719');
                console.log("transform 4326 -> 32719: ", swissCoord)
                //swissCoord = ol.proj.transform(lonlat, 'EPSG:32719', 'EPSG:3857');
                console.log("transform 3857: ", swissCoord)
                if (typeSelect.value === "Point") {
                    var suma = geoblaze.identify(img, coord);
                } else if (typeSelect.value === "Polygon") {
                    var suma = geoblaze.mean(img, coord);
                }


                console.log("sm: ", suma);
                Swal.fire({
                    icon: 'success',
                    title: 'Resultado',
                    text: 'El valor del indicador seleccionado contenido en el polígono es: ' + suma
                })
                console.log("sm: ", suma);

            });

        }
        else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'No hay figuras en el mapa.'
            })
        }*/
        }
    }

    async function guardarPoligono() {

        var poligono = vector.getSource().getFeatures()
        //vector.forEachFeature(function (feature) { geom.push(new ol.Feature(feature.getGeometry().clone())); });
        var writer = new ol.format.GeoJSON();
        var poly = writer.writeFeatures(poligono);
        console.log(poly);
        var idUsuario = @HttpContextAccessor.HttpContext.Session.GetInt32("id");
        const { value: nombre } = await Swal.fire({
            showCancelButton: true,
            title: 'Guardar figura',
            input: 'text',
            cancelButtonText: `Cancelar`,
            cancelButtonColor: '#d33',
            inputPlaceholder: 'Ingresa un nombre',
            inputAttributes: {
                maxlength: 10,
                autocapitalize: 'off',
                autocorrect: 'off'
            }
        });
        if (idUsuario == null || poligono.length == 0 || nombre == null) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Faltan datos para guardar la figura.'
            })
        }
        else {


            var data = {};
            data.IdAdmin = idUsuario;
            data.Coordenadas = poly;
            data.Nombre = nombre;
            console.log(JSON.stringify(data));

            $.ajax(
                {
                    type: "POST",
                    url: '@Url.Action("EnviarDatosPoligono", "AgroDatos")',
                    data: JSON.stringify(data),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    error: function (jqXHR, exception) {
                        var msg = '';
                        if (jqXHR.status === 0) {
                            msg = 'Not connect.\n Verify Network.';
                        } else if (jqXHR.status == 404) {
                            msg = 'Requested page not found. [404]';
                        } else if (jqXHR.status == 500) {
                            msg = 'Internal Server Error [500].';
                        } else if (exception === 'parsererror') {
                            msg = 'Requested JSON parse failed.';
                        } else if (exception === 'timeout') {
                            msg = 'Time out error.';
                        } else if (exception === 'abort') {
                            msg = 'Ajax request aborted.';
                        } else {
                            msg = 'Uncaught Error.\n' + jqXHR.responseText;
                        }
                        Swal.fire({
                            icon: 'error',
                            title: 'Resultado',
                            text: '' + msg
                        })
                        //alert("error");
                        //console.log(msg);
                    },
                    success: function () {

                        Swal.fire({
                            icon: 'success',
                            title: 'Éxito',
                            text: 'Figura guardada correctamente.'
                        })
                    }
                });
        }
    }

    async function cargarPoligono() {

        var poligonos = {};
        var len = 0;




        await $.ajax(
            {
                type: "GET",
                url: '@Url.Action("CargarDatosPoligono", "AgroDatos")',
                data: {},
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                error: function (jqXHR, exception) {
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    Swal.fire({
                        icon: 'error',
                        title: 'Resultado',
                        text: '' + msg
                    })
                    //alert("error");
                    //console.log(msg);
                },
                success: function (data) {
                    console.log("objetcta.values(data)", Object.values(data));
                    console.log("cantidad de entradas: ", Object.values(data).length);






                    //console.log(new ol.format.GeoJSON().readFeatures(data[0].coordenadas)[0]);
                    //source.addFeature(new ol.format.GeoJSON().readFeatures(data[0].coordenadas)[0]);
                    poligonos = data;
                    len = Object.values(data).length;
                }
            }); 
        console.log("len: " + len);
        var inputOptions = {}; // Define like this!
        for (var i = 0; i < len; i++)
        {
            inputOptions[i] = poligonos[i].nombre;
            //console.log(new ol.format.GeoJSON().readFeatures((poligonos[i].coordenadas)[0]));
            //console.log(new ol.format.GeoJSON().readFeatures((poligonos[i].nombre)[0]));
        }



        const { value: pol } = await Swal.fire({
            title: 'Carga de figuras guardadas',
            input: 'select',
            inputOptions: inputOptions,
            inputPlaceholder: 'Elige una figura',
            showCancelButton: true,
            inputValidator: (value) => {
                return new Promise((resolve) => {
                    resolve()
                })
            }
        })

        if (pol) {
            Swal.fire({
                icon: 'success',
                title: 'Éxito',
                text: 'Figura cargada correctamente.'
            });
            console.log(new ol.format.GeoJSON().readFeatures(poligonos[0].coordenadas)[0]);
            source.addFeature(new ol.format.GeoJSON().readFeatures(poligonos[pol].coordenadas)[0]);
        }

        //var features = new ol.format.GeoJSON().readFeatures(poligonos[0].Coordenadas);

        
    }



</script>



<style>
    * {
        box-sizing: border-box;
    }

    .map {
        height: 100%;
        width: 100%;
    }
</style>

