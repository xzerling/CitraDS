@model ViewModel
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Mapa de prueba";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Tiled WMS</title>
    <link rel="stylesheet" href="https://openlayers.org/en/v5.3.0/css/ol.css" type="text/css">
    <!-- The line below is only needed for old environments like Internet Explorer and Android 4.x -->
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL"></script>
    <script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js"></script>
    <script src="https://unpkg.com/d3-regression@1.3.4/dist/d3-regression.min.js"></script>
    <script src="~/npmlib/chart.js/dist/Chart.bundle.js"></script>
    <script src="~/npmlib/chartjs-plugin-zoom/dist/chartjs-plugin-zoom.js"></script>
    <script src="~/npmlib/hammerjs/hammer.js"></script>

</head>

<body>
    <h4>Mapa de pruebas</h4>
    <div class="row">
        <div class="col-md-8">
            <div class="card shadow mb-4">
                <div class="card-header"><h5>Mapa</h5></div>
                <div class="card-body">
                    <div class="panel panel-primary">
                        <div class="panel-body">
                            <div id="map" class="map"></div>
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <div class="row">

                        <label>Coordenadas:</label>
                        <div class="col-md-3" id="mouse-position"></div>

                        <div clas="col-md-2">
                            <label>Proyección</label>
                            <select id="projection">
                                <option value="EPSG:4326">EPSG:4326</option>
                                <option value="EPSG:3857">EPSG:3857</option>
                                <option value="EPSG:32719">EPSG:32719</option>
                            </select>
                        </div>

                        <div clas="col-md-3">
                            <label>Precisión</label>
                            <input id="precision" type="number" min="0" max="12" value="4" />
                        </div>

                    </div>
                </div>
            </div>
        </div>


        <div class="col-md-4">
            <div class="card shadow mb-4">
                <div class="card-header">
                    <h4>Herramientas de Mapa</h4>
                </div>
                <div class="card-body">
                    <div class="container-fluid">
                        <div class="col">

                            <div clas="row-md-2">
                                <h5>Control de Polígonos</h5>
                                <div class="btn-group d-flex" role="group">
                                    <button type="button" id="b1" value="btn1" onclick="addInteraction();" class="btn btn-outline-primary">Dibujar</button>
                                    <button type="button" id="b2" value="btn2" onclick="removeInteraction();" class="btn btn-warning ">Terminar</button>
                                    <button type="button" id="b3" value="btn3" onclick="deletePoly();" class="btn btn-danger">Borrar</button>
                                </div>
                                <hr />
                                    <button type="button" id="savePol" onclick="guardarPoligono()" class="btn btn-outline-success"><i class="fas fa-save"></i>  Guardar</button>
                                    <button type="button" id="loadPol" onclick="cargarPoligono()" class=" btn btn-outline-success" style="float: right"><i class="fas fa-upload"></i>  Cargar</button>


                            </div>

                            <hr />

                            <div clas="row-md-2">
                                <h5>Indicadores</h5>
                                <div class="custom-control custom-radio">
                                    <input type="radio" id="customRadio1" name="customRadio" class="custom-control-input">
                                    <label class="custom-control-label" for="customRadio1">NDVI</label>
                                </div>
                                <div class="custom-control custom-radio">
                                    <input type="radio" id="customRadio2" name="customRadio" class="custom-control-input">
                                    <label class="custom-control-label" for="customRadio2">ET24</label>
                                </div>
                                <div class="custom-control custom-radio">
                                    <input type="radio" id="customRadio3" name="customRadio" class="custom-control-input">
                                    <label class="custom-control-label" for="customRadio3">LAI</label>
                                </div>
                            </div>

                            <hr />

                            <div clas="row-md-2">
                                <h5>Operaciónes</h5>
                                <div class="btn-group d-flex" role="group">
                                    <button type="button" id="save" onclick="printpoly()" class="btn btn-outline-primary"><i class="fas fa-calculator"></i>  Promedio</button>
                                    <button type="button" id="sum" onclick="pruebaRegresion()" class="btn btn-outline-secondary"><i class="fas fa-chart-line"></i>  Consumo Anual</button>
                                    </div>

                                </div>

                                <hr />

                                <div clas="row-md-2">
                                    <form class="form-inline">
                                        <label>Tipo de Geometria &nbsp;</label>
                                        <select id="type">
                                            <option value="Polygon">Polígono</option>
                                            <option value="Point">Punto</option>
                                            <option value="None">Nada</option>
                                            <!--

    <option value="LineString">LineString</option>
    <option value="Circle">Circle</option>
    -->
                                        </select>
                                    </form>
                                </div>

                            </div>
                    </div>

                    <footer class="blockquote-footer">
                        <small class="text-muted">
                            Someone famous in <cite title="Source Title">Source Title</cite>
                        </small>
                    </footer>

                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <canvas id="line-chart" width="600" height="300"></canvas>
    </div>
</body>
</html>

<script>

    /*
    function pruebaSG() {

        import SavitzkyGolay from 'ml-savitzky-golay-generalized';
        var SG = SavitzkyGolay('SavitzkyGolay');

        var arrTest = [5.1, 4.9, 4.5, 3.2, 3.1, 2.9, 2.5, 3.1, 3.6, 3.9, 4.2, 4.8, 5];
        var doyTest = [1, 32, 63, 94, 121, 153, 182, 210, 250, 290, 310, 330, 360];
        var compYear = new Array(365);
        for (j = 0; j < arrTest; j++) {
            compYear[doyTest[j]] = arrTest[j];
        }

        console.log("año completo: " + compYear);

        var options = {
            windowSize: 15,
            derivative: 0,
            polynomial: 3,
        };

        var ans = SG(compYear, 30, options);
        console.log(ans);


    }
    */

    function pruebaRegresion() {



        //var arrTest = [5.1, 4.9, 4.5, 3.2, 3.1, 2.9, 2.5, 3.1, 3.6, 3.9, 4.2, 4.8, 5];
        //var doyTest = [1, 32, 63, 94, 121, 153, 182, 210, 250, 290, 310, 330, 360];
        //data = [[1, 5.1], [32, 4.9], [63, 4.5], [94, 3.2], [121, 3.1], [153, 2.9], [182, 2.5], [210, 3.1], [250, 3.6], [290, 3.9], [310, 4.2], [330, 4.8], [360, 5]]

        var dato1 = {
            doy: 1,
            valor: 5.1
        };
        var dato2 = {
            doy: 32,
            valor: 4.9
        };
        var dato3 = {
            doy: 63,
            valor: 4.5
        };
        var dato4 = {
            doy: 94,
            valor: 3.2
        };
        var dato5 = {
            doy: 121,
            valor: 3.1
        };
        var dato6 = {
            doy: 153,
            valor: 2.9
        };
        var dato7 = {
            doy: 182,
            valor: 2.5
        };
        var dato8 = {
            doy: 210,
            valor: 3.1
        };
        var dato9 = {
            doy: 250,
            valor: 3.6
        };
        var dato10 = {
            doy: 290,
            valor: 3.9
        };
        var dato11 = {
            doy: 310,
            valor: 4.2
        };
        var dato12 = {
            doy: 330,
            valor: 4.8
        };
        var dato13 = {
            doy: 360,
            valor: 5
        };

        var d = [dato1, dato2, dato3, dato4, dato5, dato6, dato7, dato8, dato9, dato10, dato11, dato12, dato13];

        regression = d3.regressionPoly()
            .x(d => d.doy)
            .y(d => d.valor)
            .order(4);
        regressionOutput = regression(d);
        console.log(d);
        console.log(regressionOutput);

        var ctx_live = document.getElementById("line-chart");

        var chart = new Chart(ctx_live, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        data: [],
                        label: "ET24",
                        fill: true,
                        backgroundColor: 'rgba(0, 119, 204, 0.3)'
                    },

                    {
                        data: [],
                        label: "puntos originales",
                        fill: false,
                        backgroundColor:'rgba(255, 0, 0, 0.5)'
                    }
                ]
            },
            options: {
                title: {
                    display: true,
                    text: 'Evapotranspiración diaria',
                    fontSize: 16
                },
                legend: {
                    position: 'top'
                },
                scales: {
                    xAxes: [{
                        ticks: {
                            beginAtZero: true
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'DOY',
                            fontSize: 16
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                },
                plugins: {
                    zoom: {
                        // Container for pan options
                        pan: {
                            // Boolean to enable panning
                            enabled: true,

                            // Panning directions. Remove the appropriate direction to disable
                            // Eg. 'y' would only allow panning in the y direction
                            mode: 'x'
                        },

                        // Container for zoom options
                        zoom: {
                            // Boolean to enable zooming
                            enabled: true,

                            // Zooming directions. Remove the appropriate direction to disable
                            // Eg. 'y' would only allow zooming in the y direction
                            mode: 'x',
                        }
                    }
                }
            }
        });

        console.log(regressionOutput.length);
        var indices = [];
        for (var i = 1; i < regressionOutput.length; i++) {
            console.log(regressionOutput[i]);
            console.log(Math.trunc(regressionOutput[i - 1][0]), Math.trunc(regressionOutput[i][0]));
            if (Math.trunc(regressionOutput[i - 1][0]) == Math.trunc(regressionOutput[i][0])) {
                indices[i] = i;
                //console.log(delete(regressionOutput[i]));
            }
        }
        console.log(regressionOutput);
        console.log("indices: " + indices);
        for (var i = 0; i < indices.length; i++) {
            if (indices[i] != null) {
               regressionOutput.splice(indices[i],1);
            }
        }
        console.log("borrado "+regressionOutput);

        var datos = [regressionOutput.length];
        var suma = 0;
        for (var j = 0; j < regressionOutput.length; j++) {
            if (regressionOutput[j] != null) {
                datos[j] = regressionOutput[j][1];
                suma = suma + regressionOutput[j][1];
            }

        }


            //console.log("asd" + regressionOutput[j][1]);


        var labels = [regressionOutput.length];
        for (var j = 0; j <= 360; j++) {
            if (regressionOutput[j] != null) {
                labels[j] = j;
            }


            }

            //console.log("asd" + regressionOutput[j][1]);


        console.log(datos);
        console.log(labels);
        chart.data.labels = labels;
        chart.data.datasets[0].data = datos;
        chart.data.datasets[1].data = [5.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 4.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 4.5,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 3.2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            3.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            2.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            2.5, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            3.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            3.6, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            3.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            4.2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            4.8, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            5];
        chart.update();

        Swal.fire({
            icon: 'success',
            title: 'Suma total',
            text: 'Consumo hidrico: '+suma
        })

    }



    const pro = proj4.defs("EPSG:32719", "+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs");
    ol.proj.proj4.register(proj4);

    //Coordenada del mapa desde el cursor
    var mousePositionControl = new ol.control.MousePosition({
        coordinateFormat: ol.coordinate.createStringXY(4),
        projection: 'EPSG:4326',
        // comment the following two lines to have the mouse position
        // be placed within the map.
        className: 'custom-mouse-position',
        target: document.getElementById('mouse-position'),
        undefinedHTML: '&nbsp;'
    });

    //Mapa Satelital
    var raster = new ol.layer.Tile({
        opacity: 0.7,
        proyection: 'EPSG:32719',
        source: new ol.source.XYZ({
            attributions: ['Powered by Esri',
                'Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community'],
            attributionsCollapsible: false,

            url: 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
            proyection: 'EPSG:32719',
            maxZoom: 23

        })
    });

    //imagen Satelital (Se debe modificar para ir cambiando por fecha)
    var landsat = new ol.layer.Tile({
        opacity: 0.7,
        proyection: 'EPSG:32719',
        source: new ol.source.TileWMS({
            url: 'http://localhost:8080/geoserver/localhost/wms?',
            params: { 'LAYERS': 'localhost:ET_24' },
            proyection: 'EPSG:32719',
            serverType: 'geoserver',

            // Countries have transparency, so do not fade tiles:
            transition: 0
        })
    });

    var tiff_de_geos = new ol.layer.Tile({
        proyection: 'EPSG:32719',
        source: new ol.source.TileWMS({
            url: 'http://localhost:8080/geoserver/localhost/wms?',
            params: { 'LAYERS': 'localhost:LC08_L1TP_233086_20131005_20170429_01_T1_sr_ndvi', 'FORMAT': 'image/tiff' },
            proyection: 'EPSG:32719',
            serverType: 'geoserver'
        })
    });

    var projectionSelect = document.getElementById('projection');
    projectionSelect.addEventListener('change', function (event) {
        mousePositionControl.setProjection(event.target.value);
    });

    var precisionInput = document.getElementById('precision');
    precisionInput.addEventListener('change', function (event) {
        var format = ol.coordinate.createStringXY(event.target.valueAsNumber);
        mousePositionControl.setCoordinateFormat(format);
    });

    //Mapa plano con calles
    var street = new ol.layer.Tile({ source: new ol.source.OSM() });



    //Vector para guardar los poligonos.
    var source = new ol.source.Vector({
        proyection: 'EPSG:3857'
    })

    //capa para agregar los vectores
    var vector = new ol.layer.Vector({
        source: source,
        proyection: 'EPSG:3857'
    });


    //"Constructor" del elemento mapa, Se le agregan las capas de satelite, imagen, y calle. Asi como tambien el vector
    // donde son guardados los poligonos.
    var map = new ol.Map({
        pixelRatio: 1,
        layers: [street, raster, landsat, vector],
        target: 'map',
        controls: ol.control.defaults().extend([mousePositionControl]),
        view: new ol.View({
            proyection: 'EPSG:32719',
            center: [-71, -35],
            zoom: 5
        })
    });

    var typeSelect = document.getElementById('type');
    var sumaaa;
    var geo;

    var ondrawend = async function (e) {
        console.log(e.feature.getGeometry());
        var allfeat = vector.getSource().getFeatures();
        console.log("allfeats: ", allfeat);
    };

    var draw; // global so we can remove it later
    function addInteraction() {
        var value = typeSelect.value;
        if (value !== 'None') {
            draw = new ol.interaction.Draw({
                source: source,
                type: typeSelect.value
            });
            draw.on('drawend', function(evt) {
                //... unset sketch
                map.removeInteraction(draw);
            }, this);
            map.addInteraction(draw);
            console.log("hallo");
        }
    }

    function removeInteraction() {
        map.removeInteraction(draw);
    }

    // Habilita/desabilida los botones para dibujar poligonos
    function disableB2() {
        document.getElementById("b1").disabled = false;
        document.getElementById("b2").disabled = true;
    }
    function disableB1() {
        document.getElementById("b1").disabled = true;
        document.getElementById("b2").disabled = false;
    }


    function deletePoly() {
        var features = vector.getSource().getFeatures();
        features.forEach((feature) => {
            vector.getSource().removeFeature(feature);
        });
    }


    /**
        * Handle change event.
        */
    typeSelect.onchange = function () {
        map.removeInteraction(draw);
        addInteraction();
    };

    async function printpoly() {
        var interaction = vector.getSource().getFeatures();
        interaction.forEach(async function (feature) {
            //var newgeo = feature;
            //newgeo.getGeometry().transform('EPSG:3857', "EPSG:32719");
            var newfeat = feature.clone();
            var transform = newfeat.getGeometry().transform('EPSG:3857', "EPSG:32719");
            var coord = newfeat.getGeometry().getCoordinates();

            //var workspace = layer.params.LAYERS.split(':');
            // var downloadurl = "http://localhost:8080/geoserver/" + workspace[0] + "/wcs?service=WCS&version=2.0.1&request=GetCoverage&CoverageId=" + layer.params.LAYERS + "&format=image/tiff"
            //window.open(downloadurl);


            console.log("poligono: " + coord);
            //coord = ol.proj.transform(coord, 'EPSG:32719', 'EPSG:4326');

            //const img = await geoblaze.load("https://citrads.biovisionagricola.cl/ET_24_reproj.tif");
            const img = await geoblaze.load("https://drive.google.com/uc?id=1dF134jLXHri5E2E_8i1XGc33SOoDyXXG&export=download&authuser=0");
            
            //const img = await geoblaze.load("http://localhost:8080/geoserver/localhost/wms?service=WMS&version=1.1.0&request=GetMap&layers=localhost:Ts&bbox=64051.700592833,4191661.52438661,195811.700592833,4308241.52438661&width=768&height=679&srs=EPSG:32611&format=image/geotiff");
            var sumaaa = geoblaze.sum(img);
            console.log("sm original: ", sumaaa);
            var lonlat = [223885.153852, 5786947.319458];
            var sum = geoblaze.identify(img, lonlat);
            console.log("sm crop: ", sum);
            console.log("img raster: ", img);

            var swissCoord = ol.proj.transform(lonlat, 'EPSG:4326', 'EPSG:32719');
            console.log("transform: ", swissCoord)
            //swissCoord = ol.proj.transform(lonlat, 'EPSG:32719', 'EPSG:4326');
            console.log("transform 4326: ", swissCoord)
            //swissCoord = ol.proj.transform(lonlat, 'EPSG:4326', 'EPSG:32719');
            console.log("transform 4326 -> 32719: ", swissCoord)
            //swissCoord = ol.proj.transform(lonlat, 'EPSG:32719', 'EPSG:3857');
            console.log("transform 3857: ", swissCoord)
            if (typeSelect.value === "Point") {
                var suma = geoblaze.identify(img, coord);
            } else if (typeSelect.value === "Polygon") {
                var suma = geoblaze.mean(img, coord);
            }

            
            console.log("sm: ", suma);
            Swal.fire({
                icon: 'success',
                title: 'Resultado',
                text: 'El valor del indicador seleccionado contenido en el polígono es: ' + suma
            })
            console.log("sm: ", suma);

        });
    }

    async function guardarPoligono() {

        var poligono = vector.getSource().getFeatures()
        //vector.forEachFeature(function (feature) { geom.push(new ol.Feature(feature.getGeometry().clone())); });
        var writer = new ol.format.GeoJSON();
        var poly = writer.writeFeatures(poligono);
        console.log(poly);
        var idUsuario = @HttpContextAccessor.HttpContext.Session.GetInt32("id");
        const { value: nombre } = await Swal.fire({
            showCancelButton: true,
            title: 'Guardar polígono',
            input: 'text',
            cancelButtonText: `Cancelar`,
            cancelButtonColor: '#d33',
            inputPlaceholder: 'Ingresa un nombre',
            inputAttributes: {
                maxlength: 10,
                autocapitalize: 'off',
                autocorrect: 'off'
            }
        });
        if (idUsuario == null || poligono.length == 0 || nombre == null) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Faltan datos para guardar el polígono.'
            })
        }
        else {


            var data = {};
            data.IdAdmin = idUsuario;
            data.Coordenadas = poly;
            data.Nombre = nombre;
            console.log(JSON.stringify(data));

            $.ajax(
                {
                    type: "POST",
                    url: '@Url.Action("EnviarDatosPoligono", "AgroDatos")',
                    data: JSON.stringify(data),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    error: function (jqXHR, exception) {
                        var msg = '';
                        if (jqXHR.status === 0) {
                            msg = 'Not connect.\n Verify Network.';
                        } else if (jqXHR.status == 404) {
                            msg = 'Requested page not found. [404]';
                        } else if (jqXHR.status == 500) {
                            msg = 'Internal Server Error [500].';
                        } else if (exception === 'parsererror') {
                            msg = 'Requested JSON parse failed.';
                        } else if (exception === 'timeout') {
                            msg = 'Time out error.';
                        } else if (exception === 'abort') {
                            msg = 'Ajax request aborted.';
                        } else {
                            msg = 'Uncaught Error.\n' + jqXHR.responseText;
                        }
                        Swal.fire({
                            icon: 'error',
                            title: 'Resultado',
                            text: '' + msg
                        })
                        //alert("error");
                        //console.log(msg);
                    },
                    success: function () {

                        Swal.fire({
                            icon: 'success',
                            title: 'Éxito',
                            text: 'Polígono guardado correctamente.'
                        })
                    }
                });
        }
    }

    async function cargarPoligono() {

        var poligonos = {};
        var len = 0;




        await $.ajax(
            {
                type: "GET",
                url: '@Url.Action("CargarDatosPoligono", "AgroDatos")',
                data: {},
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                error: function (jqXHR, exception) {
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    Swal.fire({
                        icon: 'error',
                        title: 'Resultado',
                        text: '' + msg
                    })
                    //alert("error");
                    //console.log(msg);
                },
                success: function (data) {
                    console.log("objetcta.values(data)", Object.values(data));
                    console.log("cantidad de entradas: ", Object.values(data).length);





                    //console.log(new ol.format.GeoJSON().readFeatures(data[0].coordenadas)[0]);
                    //source.addFeature(new ol.format.GeoJSON().readFeatures(data[0].coordenadas)[0]);
                    poligonos = data;
                    len = Object.values(data).length;
                }
            }); 
        console.log("len: " + len);
        var inputOptions = {}; // Define like this!
        for (var i = 0; i < len; i++)
        {
            inputOptions[i] = poligonos[i].nombre;
            //console.log(new ol.format.GeoJSON().readFeatures((poligonos[i].coordenadas)[0]));
            //console.log(new ol.format.GeoJSON().readFeatures((poligonos[i].nombre)[0]));
        }



        const { value: pol } = await Swal.fire({
            title: 'Carga de polígonos guardados',
            input: 'select',
            inputOptions: inputOptions,
            inputPlaceholder: 'Elige un polígono',
            showCancelButton: true,
            inputValidator: (value) => {
                return new Promise((resolve) => {
                    resolve()
                })
            }
        })

        if (pol) {
            Swal.fire({
                icon: 'success',
                title: 'Éxito',
                text: 'Polígono cargado correctamente.'
            });
            console.log(new ol.format.GeoJSON().readFeatures(poligonos[0].coordenadas)[0]);
            source.addFeature(new ol.format.GeoJSON().readFeatures(poligonos[pol].coordenadas)[0]);
        }

        //var features = new ol.format.GeoJSON().readFeatures(poligonos[0].Coordenadas);

        
    }








</script>



<style>
    * {
        box-sizing: border-box;
    }

    .map {
        height: 100%;
        width: 100%;
    }
</style>

