#pragma checksum "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Agrodatos\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4c65938ef8ea02d9b81f07e2a57c04c8492e0831"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Agrodatos_Index), @"mvc.1.0.view", @"/Views/Agrodatos/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Agrodatos/Index.cshtml", typeof(AspNetCore.Views_Agrodatos_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\_ViewImports.cshtml"
using CitraDataStore;

#line default
#line hidden
#line 2 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\_ViewImports.cshtml"
using CitraDataStore.Models;

#line default
#line hidden
#line 3 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Agrodatos\Index.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4c65938ef8ea02d9b81f07e2a57c04c8492e0831", @"/Views/Agrodatos/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"685786d528591fe38a675b867e37c0bea3782889", @"/Views/_ViewImports.cshtml")]
    public class Views_Agrodatos_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<CitraDataStore.Models.Agrodatos>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/npmlib/chart.js/dist/Chart.bundle.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/npmlib/chartjs-plugin-zoom/dist/chartjs-plugin-zoom.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/npmlib/hammerjs/hammer.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 5 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Agrodatos\Index.cshtml"
  
    Layout = "~/Views/Shared/_Layout.cshtml";


#line default
#line hidden
            BeginContext(273, 10, true);
            WriteLiteral("\r\n<html>\r\n");
            EndContext();
            BeginContext(283, 441, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c65938ef8ea02d9b81f07e2a57c04c8492e08315501", async() => {
                BeginContext(289, 145, true);
                WriteLiteral("\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width\" />\r\n    <title>Graficos</title>\r\n    <!-- Geoblaze -->\r\n    ");
                EndContext();
                BeginContext(434, 62, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c65938ef8ea02d9b81f07e2a57c04c8492e08316041", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(496, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(502, 80, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c65938ef8ea02d9b81f07e2a57c04c8492e08317294", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(582, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(588, 51, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c65938ef8ea02d9b81f07e2a57c04c8492e08318547", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(639, 78, true);
                WriteLiteral("\r\n    <script src=\"https://momentjs.com/downloads/moment.min.js\"></script>\r\n\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(724, 6, true);
            WriteLiteral("\r\n\r\n\r\n");
            EndContext();
            BeginContext(730, 2175, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c65938ef8ea02d9b81f07e2a57c04c8492e083110688", async() => {
                BeginContext(736, 891, true);
                WriteLiteral(@"
    <h1>Sistema de visualización de datos disponibles</h1>
    <div class=""row"">

        <div class=""col-md-7"">
            <div class=""card shadow mb-4"">
                <div class=""card-header py-3"">
                    <h6 class=""m-0 font-weight-bold text-primary"">Gráfico</h6>


                </div>
                <div class=""card-body"">
                    <canvas id=""line-chart"" width=""600"" height=""300""></canvas>
                </div>
            </div>
        </div>

        <div class=""col-md-5"">
            <div class=""card shadow mb-4"">
                <div class=""card-header py-3"">
                    <h6 class=""m-0 font-weight-bold text-primary"">Completa el formulario</h6>
                </div>

                <div class=""card-body"">
                    <select id=""select1"" name=""select1"" class=""form-control"">
                        ");
                EndContext();
                BeginContext(1627, 48, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c65938ef8ea02d9b81f07e2a57c04c8492e083111995", async() => {
                    BeginContext(1643, 23, true);
                    WriteLiteral("Selecionar una estación");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1675, 2, true);
                WriteLiteral("\r\n");
                EndContext();
#line 50 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Agrodatos\Index.cshtml"
                         foreach (var item in Model)
                        {

#line default
#line hidden
                BeginContext(1758, 28, true);
                WriteLiteral("                            ");
                EndContext();
                BeginContext(1786, 117, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c65938ef8ea02d9b81f07e2a57c04c8492e083113835", async() => {
                    BeginContext(1843, 1, true);
                    WriteLiteral(" ");
                    EndContext();
                    BeginContext(1845, 49, false);
#line 52 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Agrodatos\Index.cshtml"
                                                                                 Write(Html.DisplayFor(modelItem => item.NombreEstacion));

#line default
#line hidden
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                BeginWriteTagHelperAttribute();
#line 52 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Agrodatos\Index.cshtml"
                              WriteLiteral(Html.DisplayTextFor(modelItem => item.Id));

#line default
#line hidden
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = __tagHelperStringValueBuffer;
                __tagHelperExecutionContext.AddTagHelperAttribute("value", __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1903, 2, true);
                WriteLiteral("\r\n");
                EndContext();
#line 53 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Agrodatos\Index.cshtml"
                        }

#line default
#line hidden
                BeginContext(1932, 966, true);
                WriteLiteral(@"                    </select>

                    <span>Ingresar fecha de inicio</span>
                    <input type=""date"" id=""fechaI"" name=""fechaI"" class=""form-control"" placeholder=""Fecha de inicio"">

                    <span>Ingresar fecha de Termino</span>
                    <input type=""date"" id=""fechaT"" name=""fechaT"" class=""form-control"" placeholder=""Fecha de Termino"">

                </div>

                <div class=""card-footer"">
                    <button type=""submit"" class=""btn btn-success"" id=""graficar"" onclick=""dibujarGrafico()"">
                        <i class=""fa fa-dot-circle-o""></i> Graficar
                    </button>

                    <button type=""submit"" class=""btn btn-warning"" id=""descargaDatos"" onclick=""moveToDownload()"">
                        <i class=""fa fa-download""></i> Descargar Datos
                    </button>
                </div>
            </div>
        </div>

    </div>

");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2905, 3084, true);
            WriteLiteral(@"
</html>






<script>


    var ctx_live = document.getElementById(""line-chart"");

    var chart = new Chart(ctx_live, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                data: [],
                label: ""Rad W/m2"",
                fill: true,
                backgroundColor: 'rgba(0, 119, 204, 0.3)'
            }]
        },
        options: {
            title: {
                display: true,
                text: 'Valor de Radiacion Medido por piranometro al mediodia',
                fontSize: 16
            },
            legend: {
                position: 'top'
            },
            scales: {
                xAxes: [{
                    ticks: {
                        beginAtZero: true
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'DOY',
                        fontSize: 16
                    }
                }");
            WriteLiteral(@"],
                yAxes: [{
                    ticks: {
                        min: 0,
                        max: 1200,
                        stepSize: 300,
                        beginAtZero: true
                    }
                }]
            },
            plugins: {
                zoom: {
                    // Container for pan options
                    pan: {
                        // Boolean to enable panning
                        enabled: true,

                        // Panning directions. Remove the appropriate direction to disable
                        // Eg. 'y' would only allow panning in the y direction
                        mode: 'x'
                    },

                    // Container for zoom options
                    zoom: {
                        // Boolean to enable zooming
                        enabled: true,

                        // Zooming directions. Remove the appropriate direction to disable
                        // E");
            WriteLiteral(@"g. 'y' would only allow zooming in the y direction
                        mode: 'x',
                    }
                }
            }
        }
    });



    function dibujarGrafico() {

        console.log(""holamundo"");

        var estacion = document.getElementById(""select1"").value; //id del imput de seleccion
        var fechaI = document.getElementById(""fechaI"").value;
        var fechaT = document.getElementById(""fechaT"").value;

        if (estacion <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'La estación no ha sido seleccionada.',
                text: 'Debe seleccionar una estación valida.'
            })
        }
        else {

            if (fechaI != """" && fechaT != """") {

                var fecha1 = moment(fechaI);
                var fecha2 = moment(fechaT);

                console.log(""doy: "", fecha1.dayOfYear());

                var diasEntreFechas = fecha2.diff(fecha1, 'days');
                var diasDi");
            WriteLiteral("sponibles = ");
            EndContext();
            BeginContext(5990, 68, false);
#line 184 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Agrodatos\Index.cshtml"
                                 Write(HttpContextAccessor.HttpContext.Session.GetInt32("dias_disponibles"));

#line default
#line hidden
            EndContext();
            BeginContext(6058, 1148, true);
            WriteLiteral(@"

                console.log(""comparar fechas"", fechaI > fechaT)
                if (fechaI > fechaT) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Fechas Nulas',
                        text: 'Fecha de termino es anterior a la de inicio.'
                    })
                }

                if (diasDisponibles > 0 && diasEntreFechas > diasDisponibles) {

                    Swal.fire({
                        icon: 'warning',
                        title: 'Límite de días alcanzado',
                        text: 'Su cantidad maxima es de '+ diasDisponibles + ' días y supera su petición de '+diasEntreFechas+' días.'
                    })
                }

                else {

                    getSensorNames(estacion, fechaI, fechaT);
                    function getSensorNames(estacion, fechaI, fechaT) {
                        console.log(""funcion y el id: "" + estacion, fechaI, fechaT);
                        ");
            WriteLiteral("$.ajax(\r\n                            {\r\n                                type: \"GET\",\r\n                                url: \'");
            EndContext();
            BeginContext(7207, 43, false);
#line 212 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Agrodatos\Index.cshtml"
                                 Write(Url.Action("ValorPiranometro", "AgroDatos"));

#line default
#line hidden
            EndContext();
            BeginContext(7250, 8372, true);
            WriteLiteral(@"',
                                data: {
                                    estacion: estacion,
                                    fechaI: fechaI,
                                    fechaT: fechaT
                                },
                                dataType: ""json"",
                                contentType: ""application/json; charset=utf-8"",
                                error: function (jqXHR, exception) {
                                    var msg = '';
                                    if (jqXHR.status === 0) {
                                        msg = 'Not connect.\n Verify Network.';
                                    } else if (jqXHR.status == 404) {
                                        msg = 'Requested page not found. [404]';
                                    } else if (jqXHR.status == 500) {
                                        msg = 'Internal Server Error [500].';
                                    } else if (exception === 'parsererror') {
  ");
            WriteLiteral(@"                                      msg = 'Requested JSON parse failed.';
                                    } else if (exception === 'timeout') {
                                        msg = 'Time out error.';
                                    } else if (exception === 'abort') {
                                        msg = 'Ajax request aborted.';
                                    } else {
                                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                                    }
                                    alert(""error"");
                                    console.log(msg);
                                },
                                success: function (data, status, result, lista) {
                                    //console.log(""length de los datos: "", data.datos.length());
                                    console.log(""objetcta.values(data)"", Object.values(data));
                                    console.log(""cantidad de entra");
            WriteLiteral(@"das: "", Object.values(data).length);
                                    //console.log(""data: "", data[0].fecha)


                                    var labels = data.map(function (e) {
                                        return e.fecha;
                                    });
                                    var datos = data.map(function (e) {
                                        return e.valor;
                                    });

                                    for (var i = 0; i < diasEntreFechas + 1; i++) {
                                        //make sure we are not checking the last date in the labels array
                                        if (i + 1 < labels.length) {
                                            console.log(""Inicio de todo. Fecha: ""+labels[i]);
                                            var date1 = moment(labels[i], ""DD-MM-YYYY"");
                                            var date2 = moment(labels[i + 1], ""DD-MM-YYYY"");
                    ");
            WriteLiteral(@"                        var lastDate = fecha2;
                                            console.log(""tamaño de labels1: "" + labels.length);


                                            var d1 = new Date(fecha1);
                                            var dn = new Date(lastDate);
                                            var d2 = new Date(fecha1 + ((24 * 60 * 60 * 1000) * (i + 1)));
                                            console.log(""d1: "" + d1);
                                            console.log(""d2: "" + d2);

                                            //if the current date +1 is not the same as it's next neighbor we have to add in a new one
                                            if (!date1.add(1, ""days"").isSameOrAfter(date2)) {

                                                console.log(""te digo que esta fecha"")
                                                console.log(date1);
                                                console.log(""no es igual a"");
         ");
            WriteLiteral(@"                                       console.log(date2);
                                                //var indice = i + 1;
                                                //console.log(""fecha agregada: "" + date1.toString() + "" indice: "" + indice);
                                                //add the label
                                                labels.splice(i + 1, 0, date1.format(""DD-MM-YYYY""));
                                                //add the data
                                                datos.splice(i + 1, 0, null);
                                                //console.log(""tamaño de labels2: "" + labels.length);
                                            }
                                            else if (d2 < dn) {
                                                console.log(""fecha siguiente a la actual es menor a la fecha final"");
                                            }
                                        }
                                 ");
            WriteLiteral(@"       console.log(""tamaño de labels3: "" + labels.length);
                                    }



                                    console.log(""tamaño de labels4: "" + labels.length);

                                    for (var j = 0; j < diasEntreFechas + 1; j++) {
                                        //var f = fecha1.subtract(1, ""day"");
                                        var ff = fecha1
                                        console.log(""labels fin: "" + labels[j]+ "" j: ""+j);
                                        labels[j] = ff.dayOfYear();
                                        ff = ff.add(1, ""day"");
                                    }
                                    //labels = labels.slice(0, diasEntreFechas+1)


                                    //Actualizacion del grafico
                                    chart.data.labels = labels;
                                    chart.data.datasets[0].data = datos;
                                    chart.update();
");
            WriteLiteral(@"                                    console.log(labels);
                                    console.log(datos);


                                    //Alertas de los datos obtenidos
                                    if (diasEntreFechas + 1 != Object.values(data).length) {
                                        var diferencia = (diasEntreFechas + 1) - Object.values(data).length
                                        Swal.fire({
                                            icon: 'warning',
                                            title: 'Datos incompletos',
                                            text: 'Hay perdida de ' +diferencia+' '+' datos en el intervalo de fechas',
                                            footer: 'Pruebe con un nuevo intervalo o comuniquese con el Admin.'
                                        })
                                        console.log(""Dias entre fecha: "", diasEntreFechas, ""cantidad de entradas: "", Object.values(data).length)
                    ");
            WriteLiteral(@"                }
                                    else {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Datos completos',
                                            text: 'Todos los datos del intervalo están disponibles.'
                                        })
                                        console.log(""Dias entre fecha: "", diasEntreFechas, ""cantidad de entradas: "", Object.values(data).length)
                                    }
                                    //alert(Object.values(data) + ""\nStatus: "" + status);
                                    //console.log(data.length);
                                }
                            } )
                    }
                }

            }

            else {
                Swal.fire({
                    icon: 'error',
                    title: 'Fechas Nulas',
                    text: 'Deb");
            WriteLiteral("e ingresar una fecha de inicio y de termino.\'\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    function moveToDownload()\r\n    {\r\n        window.location.href = \'");
            EndContext();
            BeginContext(15623, 32, false);
#line 358 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Agrodatos\Index.cshtml"
                           Write(Url.Action("Datos", "Agrodatos"));

#line default
#line hidden
            EndContext();
            BeginContext(15655, 34, true);
            WriteLiteral("\';\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n</script>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<CitraDataStore.Models.Agrodatos>> Html { get; private set; }
    }
}
#pragma warning restore 1591
