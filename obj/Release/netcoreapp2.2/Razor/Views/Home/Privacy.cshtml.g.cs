#pragma checksum "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Home\Privacy.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Privacy), @"mvc.1.0.view", @"/Views/Home/Privacy.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Privacy.cshtml", typeof(AspNetCore.Views_Home_Privacy))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\_ViewImports.cshtml"
using CitraDataStore;

#line default
#line hidden
#line 2 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\_ViewImports.cshtml"
using CitraDataStore.Models;

#line default
#line hidden
#line 2 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Home\Privacy.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c8", @"/Views/Home/Privacy.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"685786d528591fe38a675b867e37c0bea3782889", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Privacy : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<ViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/npmlib/chart.js/dist/Chart.bundle.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/npmlib/chartjs-plugin-zoom/dist/chartjs-plugin-zoom.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/npmlib/hammerjs/hammer.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "EPSG:4326", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "EPSG:3857", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "EPSG:32719", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Polygon", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Point", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "None", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-inline"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 4 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Home\Privacy.cshtml"
  
    ViewData["Title"] = "Mapa de prueba";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(225, 31, true);
            WriteLiteral("\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n");
            EndContext();
            BeginContext(256, 1013, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c87634", async() => {
                BeginContext(262, 791, true);
                WriteLiteral(@"
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <title>Tiled WMS</title>
    <link rel=""stylesheet"" href=""https://openlayers.org/en/v5.3.0/css/ol.css"" type=""text/css"">
    <!-- The line below is only needed for old environments like Internet Explorer and Android 4.x -->
    <script src=""https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL""></script>
    <script src=""https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js""></script>
    <script src=""https://unpkg.com/d3-regression@1.3.4/dist/d3-regression.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/geotiff""></script>
    <script src=""https://momentjs.com/downloads/moment.min.js""></script>
    ");
                EndContext();
                BeginContext(1053, 62, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c88826", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1115, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1121, 80, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c810081", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1201, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(1207, 51, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c811337", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1258, 4, true);
                WriteLiteral("\r\n\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1269, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(1273, 6222, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c813399", async() => {
                BeginContext(1279, 888, true);
                WriteLiteral(@"
    <h4>Mapa de pruebas</h4>
    <div class=""row"">
        <div class=""col-md-8"">
            <div class=""card shadow mb-4"">
                <div class=""card-header""><h5>Mapa</h5></div>
                <div class=""card-body"">
                    <div class=""panel panel-primary"">
                        <div class=""panel-body"">
                            <div id=""map"" class=""map""></div>
                        </div>
                    </div>
                </div>

                <div class=""card-footer"">
                    <div class=""row"">

                        <label>Coordenadas:</label>
                        <div class=""col-md-3"" id=""mouse-position""></div>

                        <div clas=""col-md-2"">
                            <label>Proyección</label>
                            <select id=""projection"">
                                ");
                EndContext();
                BeginContext(2167, 44, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c814700", async() => {
                    BeginContext(2193, 9, true);
                    WriteLiteral("EPSG:4326");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2211, 34, true);
                WriteLiteral("\r\n                                ");
                EndContext();
                BeginContext(2245, 44, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c816201", async() => {
                    BeginContext(2271, 9, true);
                    WriteLiteral("EPSG:3857");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2289, 34, true);
                WriteLiteral("\r\n                                ");
                EndContext();
                BeginContext(2323, 46, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c817702", async() => {
                    BeginContext(2350, 10, true);
                    WriteLiteral("EPSG:32719");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(2369, 3890, true);
                WriteLiteral(@"
                            </select>
                        </div>

                        <div clas=""col-md-3"">
                            <label>Precisión</label>
                            <input id=""precision"" type=""number"" min=""0"" max=""12"" value=""4"" />
                        </div>

                    </div>
                </div>
            </div>
        </div>


        <div class=""col-md-4"">
            <div class=""card shadow mb-4"">
                <div class=""card-header"">
                    <h4>Herramientas de Mapa</h4>
                </div>
                <div class=""card-body"">
                    <div class=""container-fluid"">
                        <div class=""col"">

                            <div clas=""row-md-2"">
                                <h5>Control de Polígonos</h5>
                                <div class=""btn-group d-flex"" role=""group"">
                                    <button type=""button"" id=""b1"" value=""btn1"" onclick=""addInteraction();");
                WriteLiteral(@""" class=""btn btn-outline-primary"">Dibujar</button>
                                    <button type=""button"" id=""b2"" value=""btn2"" onclick=""removeInteraction();"" class=""btn btn-warning "">Terminar</button>
                                    <button type=""button"" id=""b3"" value=""btn3"" onclick=""deletePoly();"" class=""btn btn-danger"">Borrar</button>
                                </div>
                                <hr />
                                    <button type=""button"" id=""savePol"" onclick=""guardarPoligono()"" class=""btn btn-outline-success""><i class=""fas fa-save""></i>  Guardar</button>
                                    <button type=""button"" id=""loadPol"" onclick=""cargarPoligono()"" class="" btn btn-outline-success"" style=""float: right""><i class=""fas fa-upload""></i>  Cargar</button>


                            </div>

                            <hr />

                            <div clas=""row-md-2"">
                                <h5>Indicadores</h5>
                                ");
                WriteLiteral(@"<div class=""custom-control custom-radio"">
                                    <input type=""radio"" id=""customRadio1"" name=""customRadio"" class=""custom-control-input"">
                                    <label class=""custom-control-label"" for=""customRadio1"">NDVI</label>
                                </div>
                                <div class=""custom-control custom-radio"">
                                    <input type=""radio"" id=""customRadio2"" name=""customRadio"" class=""custom-control-input"">
                                    <label class=""custom-control-label"" for=""customRadio2"">ET24</label>
                                </div>
                                <div class=""custom-control custom-radio"">
                                    <input type=""radio"" id=""customRadio3"" name=""customRadio"" class=""custom-control-input"">
                                    <label class=""custom-control-label"" for=""customRadio3"">LAI</label>
                                </div>
                         ");
                WriteLiteral(@"   </div>

                            <hr />

                            <div clas=""row-md-2"">
                                <h5>Operaciónes</h5>
                                <div class=""btn-group d-flex"" role=""group"">
                                    <button type=""button"" id=""save"" onclick=""printpoly()"" class=""btn btn-outline-primary""><i class=""fas fa-calculator""></i>  Promedio</button>
                                    <button type=""button"" id=""sum"" onclick=""pruebaRegresion()"" class=""btn btn-outline-secondary""><i class=""fas fa-chart-line""></i>  Consumo Anual</button>
                                    </div>

                                </div>

                                <hr />

                                <div clas=""row-md-2"">
                                    ");
                EndContext();
                BeginContext(6259, 669, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c823325", async() => {
                    BeginContext(6285, 187, true);
                    WriteLiteral("\r\n                                        <label>Tipo de Geometria &nbsp;</label>\r\n                                        <select id=\"type\">\r\n                                            ");
                    EndContext();
                    BeginContext(6472, 41, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c823922", async() => {
                        BeginContext(6496, 8, true);
                        WriteLiteral("Polígono");
                        EndContext();
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(6513, 46, true);
                    WriteLiteral("\r\n                                            ");
                    EndContext();
                    BeginContext(6559, 36, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c825522", async() => {
                        BeginContext(6581, 5, true);
                        WriteLiteral("Punto");
                        EndContext();
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(6595, 46, true);
                    WriteLiteral("\r\n                                            ");
                    EndContext();
                    BeginContext(6641, 34, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "cde0c11e7ee3bdc53bb210adbd4f21b4dfcee0c827119", async() => {
                        BeginContext(6662, 4, true);
                        WriteLiteral("Nada");
                        EndContext();
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(6675, 246, true);
                    WriteLiteral("\r\n                                            <!--\r\n\r\n    <option value=\"LineString\">LineString</option>\r\n    <option value=\"Circle\">Circle</option>\r\n    -->\r\n                                        </select>\r\n                                    ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(6928, 560, true);
                WriteLiteral(@"
                                </div>

                            </div>
                    </div>

                    <footer class=""blockquote-footer"">
                        <small class=""text-muted"">
                            Someone famous in <cite title=""Source Title"">Source Title</cite>
                        </small>
                    </footer>

                </div>
            </div>
        </div>
    </div>
    <div class=""card-body"">
        <canvas id=""line-chart"" width=""600"" height=""300""></canvas>
    </div>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(7495, 45399, true);
            WriteLiteral(@"
</html>

<script>

    

    /*
    function pruebaSG() {

        import SavitzkyGolay from 'ml-savitzky-golay-generalized';
        var SG = SavitzkyGolay('SavitzkyGolay');

        var arrTest = [5.1, 4.9, 4.5, 3.2, 3.1, 2.9, 2.5, 3.1, 3.6, 3.9, 4.2, 4.8, 5];
        var doyTest = [1, 32, 63, 94, 121, 153, 182, 210, 250, 290, 310, 330, 360];
        var compYear = new Array(365);
        for (j = 0; j < arrTest; j++) {
            compYear[doyTest[j]] = arrTest[j];
        }

        console.log(""año completo: "" + compYear);

        var options = {
            windowSize: 15,
            derivative: 0,
            polynomial: 3,
        };

        var ans = SG(compYear, 30, options);
        console.log(ans);


    }
    */

    async function pruebaRegresion() {



        //var arrTest = [5.1, 4.9, 4.5, 3.2, 3.1, 2.9, 2.5, 3.1, 3.6, 3.9, 4.2, 4.8, 5];
        //var doyTest = [1, 32, 63, 94, 121, 153, 182, 210, 250, 290, 310, 330, 360];
        //data = [[1, 5.1");
            WriteLiteral(@"], [32, 4.9], [63, 4.5], [94, 3.2], [121, 3.1], [153, 2.9], [182, 2.5], [210, 3.1], [250, 3.6], [290, 3.9], [310, 4.2], [330, 4.8], [360, 5]]
        var values=[];
        var keys = """";

        var nFiguras = vector.getSource().getFeatures().length;
        if (nFiguras > 0) {

            var interaction = vector.getSource().getFeatures()[0];
            var newfeat = interaction.clone();
            var transform = newfeat.getGeometry().transform('EPSG:3857', ""EPSG:32719"");
            var coord = newfeat.getGeometry().getCoordinates();

            console.log(""coordenadas regresion: "", coord);
            console.log(""coordenadas regresion transform: "", transform);


            /*
            var urlGeosrv = ""http://localhost:8080/geoserver/Mili/wms?"";

            var parameters = {
                service: 'WMS',
                version: '1.1.1',
                request: 'GetFeatureInfo',
                layers: 'Mili:stack2009',
                query_layers: 'Mili:stack2009'");
            WriteLiteral(@",
                feature_count: 10,
                info_format: 'text/javascript',
                format_options: 'callback:handleJson',
                SRS: 'EPSG: 32719',
                width: 101,
                height: 101,
                x: 50,
                y: 50,
                bbox: (coord[0]) + ',' + (coord[1])
            };
            var url = urlGeosrv + L.Util.getParamString(parameters);
            console.log(""url: "", url);
            $.ajax({
                url: urlGeosrv + L.Util.getParamString(parameters),
                dataType: 'jsonp',
                success: function (data) {
                    handleJson(data)
                }
            });

            */
        }
        var interaction = vector.getSource().getFeatures()[0];
        var newfeat = interaction.clone();
        var transform = newfeat.getGeometry().transform('EPSG:3857', ""EPSG:32719"");
        var coord = newfeat.getGeometry().getCoordinates();

        console.log(""coorde");
            WriteLiteral(@"nadas regresion: "", coord);
        var cX = (coord[0]-0.1).toString();
        var cY = (coord[1]-0.1).toString();
        var ccX = (coord[0]+0.1).toString();
        var ccY = (coord[1]+0.1).toString();
        console.log(cX, cY, ccX, ccY);
        console.log(""coordenadas regresion transform: "", transform);

        const proxyurl = ""https://cors-anywhere.herokuapp.com/"";
        var funk = proxyurl+""http://biovisionagricola.cl:8080/geoserver/Mili/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetFeatureInfo&FORMAT=image/jpeg&QUERY_LAYERS=Mili:et24stack2008&STYLES&LAYERS=Mili:et24stack2008&exceptions=application/vnd.ogc.se_inimage&INFO_FORMAT=application/json&FEATURE_COUNT=50&X=50&Y=50&SRS=EPSG:32719&WIDTH=101&HEIGHT=101&BBOX="" + cX + "","" + cY + "","" + ccX + "","" + ccY;    //263794.29767469596,6017642.936587741,279217.292780405,6033065.931693451"";
        //var funk = ""http://localhost:8080/geoserver/Mili/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetFeatureInfo&FORMAT=image/jpeg&QUERY_LAYERS=Mili:stack2009&ST");
            WriteLiteral(@"YLES&LAYERS=Mili:stack2009&exceptions=application/vnd.ogc.se_inimage&INFO_FORMAT=application/json&FEATURE_COUNT=50&X=50&Y=50&SRS=EPSG:32719&WIDTH=101&HEIGHT=101&BBOX="" + cX + "","" + cY + "","" + ccX + "","" + ccY;    //263794.29767469596,6017642.936587741,279217.292780405,6033065.931693451"";
        var valoresGeoserver = $.ajax({
            url: funk,
            dataType: 'json',
            error: function (jqXHR, exception) {
                var msg = '';
                if (jqXHR.status === 0) {
                    msg = 'Not connect.\n Verify Network.';
                } else if (jqXHR.status == 404) {
                    msg = 'Requested page not found. [404]';
                } else if (jqXHR.status == 500) {
                    msg = 'Internal Server Error [500].';
                } else if (exception === 'parsererror') {
                    msg = 'Requested JSON parse failed.';
                } else if (exception === 'timeout') {
                    msg = 'Time out error.';
            ");
            WriteLiteral(@"    } else if (exception === 'abort') {
                    msg = 'Ajax request aborted.';
                } else {
                    msg = 'Uncaught Error.\n' + jqXHR.responseText;
                }
            },
            success: function (data) {
                console.log(""data desde geoserver: "", data),
                    console.log(""algo: "", data[""features""][0][""properties""].toString()),
                    console.log(JSON.stringify(data[""features""][0][""properties""])),
                    stringg = JSON.parse(JSON.stringify(data[""features""][0][""properties""]))

                values = Object.values(stringg);
                keys = Object.keys(stringg);

                for (i = 0; i < keys.length; i++) {
                    var s = keys[i].split(""."")[1];
                    //console.log(s);
                    var fecha1 = moment(s, ""DD-MM-YYYY"");
                    //console.log(fecha1);

                    //console.log(""doy: "", fecha1.dayOfYear());
                 ");
            WriteLiteral(@"   keys[i] = fecha1.dayOfYear();
                }

                var yesy = [];
                for (i = 0; i < keys.length; i++) {
                    yesy[i] = {
                        doy: keys[i],
                        valor: values[i]
                    };
                }
                console.log(""ahorasi: "", yesy);



                regression = d3.regressionPoly()
                    .x(yesy => yesy.doy)
                    .y(yesy => yesy.valor)
                    .order(5);
                regressionOutput = regression(yesy);
                //console.log(yesy);
                //console.log(regressionOutput);

                var ctx_live = document.getElementById(""line-chart"");

                var chart = new Chart(ctx_live, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [
                            {
                                data: [],
                        ");
            WriteLiteral(@"        label: ""ET24"",
                                fill: true,
                                backgroundColor: 'rgba(0, 119, 204, 0.3)'
                            },

                            {
                                data: [],
                                label: ""puntos originales"",
                                fill: false,
                                backgroundColor: 'rgba(255, 0, 0, 0.5)'
                            }
                        ]
                    },
                    options: {
                        title: {
                            display: true,
                            text: 'Evapotranspiración diaria',
                            fontSize: 16
                        },
                        legend: {
                            position: 'top'
                        },
                        scales: {
                            xAxes: [{
                                ticks: {
                                    beginA");
            WriteLiteral(@"tZero: true
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: 'DOY',
                                    fontSize: 16
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        },
                        plugins: {
                            zoom: {
                                // Container for pan options
                                pan: {
                                    // Boolean to enable panning
                                    enabled: true,

                                    // Panning directions. Remove the appropriate direction to disable
                                    // Eg. 'y' would only allow panning");
            WriteLiteral(@" in the y direction
                                    mode: 'x'
                                },

                                // Container for zoom options
                                zoom: {
                                    // Boolean to enable zooming
                                    enabled: true,

                                    // Zooming directions. Remove the appropriate direction to disable
                                    // Eg. 'y' would only allow zooming in the y direction
                                    mode: 'x',
                                }
                            }
                        }
                    }
                });

                //console.log(regressionOutput.length);
                var indices = [];
                for (var i = 1; i < regressionOutput.length; i++) {
                    //console.log(regressionOutput[i]);
                    //console.log(Math.trunc(regressionOutput[i - 1][0]), Math.trunc(regressi");
            WriteLiteral(@"onOutput[i][0]));
                    if (Math.trunc(regressionOutput[i - 1][0]) == Math.trunc(regressionOutput[i][0])) {
                        indices[i] = i;
                        //console.log(delete(regressionOutput[i]));
                    }
                }
                //console.log(regressionOutput);
                //console.log(""indices: "" + indices);
                for (var i = 0; i < indices.length; i++) {
                    if (indices[i] != null) {
                        regressionOutput.splice(indices[i], 1);
                    }
                }
                //console.log(""borrado "" + regressionOutput);

                var datos = [regressionOutput.length];
                var suma = 0;
                for (var j = 0; j < regressionOutput.length; j++) {
                    if (regressionOutput[j] != null) {
                        datos[j] = regressionOutput[j][1];
                        suma = suma + regressionOutput[j][1];
                    }

    ");
            WriteLiteral(@"            }


                //console.log(""asd"" + regressionOutput[j][1]);


                var labels = [regressionOutput.length];
                for (var j = 0; j <= 360; j++) {
                    if (regressionOutput[j] != null) {
                        labels[j] = j;
                    }


                }

                //console.log(""asd"" + regressionOutput[j][1]);

                chart.data.labels = labels;
                chart.data.datasets[0].data = datos;

                /*
                console.log(datos);
                console.log(labels);

                chart.data.datasets[1].data = [5.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 4.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 4.5,");
            WriteLiteral(@"
                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 3.2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    3.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    2.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    2.5, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                   ");
            WriteLiteral(@" 3.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    3.6, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    3.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    4.2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
                    4.8, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
             ");
            WriteLiteral(@"       5];*/
                chart.update();

                Swal.fire({
                    icon: 'success',
                    title: 'Suma total',
                    text: 'Consumo hidrico: ' + suma
                })


                

            }
        });



       /*

        var dato1 = {
            doy: 1,
            valor: 5.1
        };
        var dato2 = {
            doy: 32,
            valor: 4.9
        };
        var dato3 = {
            doy: 63,
            valor: 4.5
        };
        var dato4 = {
            doy: 94,
            valor: 3.2
        };
        var dato5 = {
            doy: 121,
            valor: 3.1
        };
        var dato6 = {
            doy: 153,
            valor: 2.9
        };
        var dato7 = {
            doy: 182,
            valor: 2.5
        };
        var dato8 = {
            doy: 210,
            valor: 3.1
        };
        var dato9 = {
            doy: 250,
            valor: 3.6
");
            WriteLiteral(@"        };
        var dato10 = {
            doy: 290,
            valor: 3.9
        };
        var dato11 = {
            doy: 310,
            valor: 4.2
        };
        var dato12 = {
            doy: 330,
            valor: 4.8
        };
        var dato13 = {
            doy: 360,
            valor: 5
        };

        var d = [dato1, dato2, dato3, dato4, dato5, dato6, dato7, dato8, dato9, dato10, dato11, dato12, dato13];
        console.log(""zxcv: "",d);
        
        regression = d3.regressionPoly()
            .x(d => yesy.doy)
            .y(d => yesy.valor)
            .order(4);
        regressionOutput = regression(d);
        console.log(d);
        console.log(regressionOutput);

        var ctx_live = document.getElementById(""line-chart"");

        var chart = new Chart(ctx_live, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        data: [],
          ");
            WriteLiteral(@"              label: ""ET24"",
                        fill: true,
                        backgroundColor: 'rgba(0, 119, 204, 0.3)'
                    },

                    {
                        data: [],
                        label: ""puntos originales"",
                        fill: false,
                        backgroundColor:'rgba(255, 0, 0, 0.5)'
                    }
                ]
            },
            options: {
                title: {
                    display: true,
                    text: 'Evapotranspiración diaria',
                    fontSize: 16
                },
                legend: {
                    position: 'top'
                },
                scales: {
                    xAxes: [{
                        ticks: {
                            beginAtZero: true
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'DOY',
              ");
            WriteLiteral(@"              fontSize: 16
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                },
                plugins: {
                    zoom: {
                        // Container for pan options
                        pan: {
                            // Boolean to enable panning
                            enabled: true,

                            // Panning directions. Remove the appropriate direction to disable
                            // Eg. 'y' would only allow panning in the y direction
                            mode: 'x'
                        },

                        // Container for zoom options
                        zoom: {
                            // Boolean to enable zooming
                            enabled: true,

                            // Zooming directions. Remove the appropriate");
            WriteLiteral(@" direction to disable
                            // Eg. 'y' would only allow zooming in the y direction
                            mode: 'x',
                        }
                    }
                }
            }
        });

        console.log(regressionOutput.length);
        var indices = [];
        for (var i = 1; i < regressionOutput.length; i++) {
            console.log(regressionOutput[i]);
            console.log(Math.trunc(regressionOutput[i - 1][0]), Math.trunc(regressionOutput[i][0]));
            if (Math.trunc(regressionOutput[i - 1][0]) == Math.trunc(regressionOutput[i][0])) {
                indices[i] = i;
                //console.log(delete(regressionOutput[i]));
            }
        }
        console.log(regressionOutput);
        console.log(""indices: "" + indices);
        for (var i = 0; i < indices.length; i++) {
            if (indices[i] != null) {
               regressionOutput.splice(indices[i],1);
            }
        }
        console.log(");
            WriteLiteral(@"""borrado ""+regressionOutput);

        var datos = [regressionOutput.length];
        var suma = 0;
        for (var j = 0; j < regressionOutput.length; j++) {
            if (regressionOutput[j] != null) {
                datos[j] = regressionOutput[j][1];
                suma = suma + regressionOutput[j][1];
            }

        }


            //console.log(""asd"" + regressionOutput[j][1]);


        var labels = [regressionOutput.length];
        for (var j = 0; j <= 360; j++) {
            if (regressionOutput[j] != null) {
                labels[j] = j;
            }


            }

            //console.log(""asd"" + regressionOutput[j][1]);


        console.log(datos);
        console.log(labels);
        chart.data.labels = labels;
        chart.data.datasets[0].data = datos;
        chart.data.datasets[1].data = [5.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, n");
            WriteLiteral(@"ull, null, null, null, null, 4.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 4.5,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 3.2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            3.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            2.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            2.5, null, null, n");
            WriteLiteral(@"ull, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            3.1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            3.6, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            3.9, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            4.2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            4.8, null, null, null, null, null, null, null, null,");
            WriteLiteral(@" null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            5];
        chart.update();

        Swal.fire({
            icon: 'success',
            title: 'Suma total',
            text: 'Consumo hidrico: '+suma
        })*/

    }



    const pro = proj4.defs(""EPSG:32719"", ""+proj=utm +zone=19 +south +datum=WGS84 +units=m +no_defs"");
    ol.proj.proj4.register(proj4);

    //Coordenada del mapa desde el cursor
    var mousePositionControl = new ol.control.MousePosition({
        coordinateFormat: ol.coordinate.createStringXY(4),
        projection: 'EPSG:4326',
        // comment the following two lines to have the mouse position
        // be placed within the map.
        className: 'custom-mouse-position',
        target: document.getElementById('mouse-position'),
        undefinedHTML: '&nbsp;'
    });

    //Mapa Satelital
    var raster = new ol.layer.Tile({
        opacity: 0.7,
      ");
            WriteLiteral(@"  proyection: 'EPSG:32719',
        source: new ol.source.XYZ({
            attributions: ['Powered by Esri',
                'Source: Esri, DigitalGlobe, GeoEye, Earthstar Geographics, CNES/Airbus DS, USDA, USGS, AeroGRID, IGN, and the GIS User Community'],
            attributionsCollapsible: false,

            url: 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
            proyection: 'EPSG:32719',
            maxZoom: 23

        })
    });

    //imagen Satelital (Se debe modificar para ir cambiando por fecha)
    var landsat = new ol.layer.Tile({
        opacity: 0.7,
        proyection: 'EPSG:32719',
        source: new ol.source.TileWMS({
            url: 'http://localhost:8080/geoserver/localhost/wms?',
            params: { 'LAYERS': 'localhost:ET_24' },
            proyection: 'EPSG:32719',
            serverType: 'geoserver',

            // Countries have transparency, so do not fade tiles:
            transition: 0
   ");
            WriteLiteral(@"     })
    });

    var tiff_de_geos = new ol.layer.Tile({
        proyection: 'EPSG:32719',
        source: new ol.source.TileWMS({
            url: 'http://localhost:8080/geoserver/localhost/wms?',
            params: { 'LAYERS': 'localhost:LC08_L1TP_233086_20131005_20170429_01_T1_sr_ndvi', 'FORMAT': 'image/tiff' },
            proyection: 'EPSG:32719',
            serverType: 'geoserver'
        })
    });

    var projectionSelect = document.getElementById('projection');
    projectionSelect.addEventListener('change', function (event) {
        mousePositionControl.setProjection(event.target.value);
    });

    var precisionInput = document.getElementById('precision');
    precisionInput.addEventListener('change', function (event) {
        var format = ol.coordinate.createStringXY(event.target.valueAsNumber);
        mousePositionControl.setCoordinateFormat(format);
    });

    //Mapa plano con calles
    var street = new ol.layer.Tile({ source: new ol.source.OSM() });



");
            WriteLiteral(@"    //Vector para guardar los poligonos.
    var source = new ol.source.Vector({
        proyection: 'EPSG:3857'
    })

    //capa para agregar los vectores
    var vector = new ol.layer.Vector({
        source: source,
        proyection: 'EPSG:3857'
    });


    //""Constructor"" del elemento mapa, Se le agregan las capas de satelite, imagen, y calle. Asi como tambien el vector
    // donde son guardados los poligonos.
    var map = new ol.Map({
        pixelRatio: 1,
        layers: [street, raster, landsat, vector],
        target: 'map',
        controls: ol.control.defaults().extend([mousePositionControl]),
        view: new ol.View({
            proyection: 'EPSG:32719',
            center: ol.proj.fromLonLat([-71.60, -35.40]),
            zoom: 10
        })
    });

    var typeSelect = document.getElementById('type');
    var sumaaa;
    var geo;

    var ondrawend = async function (e) {
        console.log(e.feature.getGeometry());
        var allfeat = vector.getSou");
            WriteLiteral(@"rce().getFeatures();
        console.log(""allfeats: "", allfeat);
    };

    var draw; // global so we can remove it later
    function addInteraction() {
        var value = typeSelect.value;
        if (value !== 'None') {
            draw = new ol.interaction.Draw({
                source: source,
                type: typeSelect.value
            });
            draw.on('drawend', function(evt) {
                //... unset sketch
                map.removeInteraction(draw);
            }, this);
            map.addInteraction(draw);
            console.log(""hallo"");
        }
    }

    function removeInteraction() {
        map.removeInteraction(draw);
    }

    // Habilita/desabilida los botones para dibujar poligonos
    function disableB2() {
        document.getElementById(""b1"").disabled = false;
        document.getElementById(""b2"").disabled = true;
    }
    function disableB1() {
        document.getElementById(""b1"").disabled = true;
        document.getElementByI");
            WriteLiteral(@"d(""b2"").disabled = false;
    }


    function deletePoly() {
        var features = vector.getSource().getFeatures();
        features.forEach((feature) => {
            vector.getSource().removeFeature(feature);
        });
    }


    /**
        * Handle change event.
        */
    typeSelect.onchange = function () {
        map.removeInteraction(draw);
        addInteraction();
    };

    async function printpoly() {

        /*
        var funk = ""http://localhost:8080/geoserver/Mili/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetFeatureInfo&FORMAT=image/jpeg&QUERY_LAYERS=Mili:stack2009&STYLES&LAYERS=Mili:stack2009&exceptions=application/vnd.ogc.se_inimage&INFO_FORMAT=application/json&FEATURE_COUNT=50&X=50&Y=50&SRS=EPSG:32719&WIDTH=101&HEIGHT=101&BBOX=263794.29767469596,6017642.936587741,279217.292780405,6033065.931693451"";
        var valoresGeoserver = $.ajax({
            url: funk,
            dataType: 'json',
            error: function (jqXHR, exception) {
                ");
            WriteLiteral(@"var msg = '';
                if (jqXHR.status === 0) {
                    msg = 'Not connect.\n Verify Network.';
                } else if (jqXHR.status == 404) {
                    msg = 'Requested page not found. [404]';
                } else if (jqXHR.status == 500) {
                    msg = 'Internal Server Error [500].';
                } else if (exception === 'parsererror') {
                    msg = 'Requested JSON parse failed.';
                } else if (exception === 'timeout') {
                    msg = 'Time out error.';
                } else if (exception === 'abort') {
                    msg = 'Ajax request aborted.';
                } else {
                    msg = 'Uncaught Error.\n' + jqXHR.responseText;
                }
            },
            success: function (data) {
                console.log(""data desde geoserver: "", data),
                    console.log(""algo: "", data[""features""][0][""properties""].toString()),
                    console.log(JSON");
            WriteLiteral(@".stringify(data[""features""][0][""properties""])),
                    stringg = JSON.parse(JSON.stringify(data[""features""][0][""properties""])),
                    console.log(""arreglo? "", Object.values(stringg)),
                    console.log(""llaves "", Object.keys(stringg))



                

            }
        });
        */

        var values = [];
        var keys = """";

        var nFiguras = vector.getSource().getFeatures().length;
        if (nFiguras > 0) {

            var interaction = vector.getSource().getFeatures()[0];
            var newfeat = interaction.clone();
            var transform = newfeat.getGeometry().transform('EPSG:3857', ""EPSG:32719"");
            var coord = newfeat.getGeometry().getCoordinates();

            console.log(""coordenadas regresion: "", coord);
            console.log(""coordenadas regresion transform: "", transform);


            /*
            var urlGeosrv = ""http://localhost:8080/geoserver/Mili/wms?"";

            var parameters");
            WriteLiteral(@" = {
                service: 'WMS',
                version: '1.1.1',
                request: 'GetFeatureInfo',
                layers: 'Mili:stack2009',
                query_layers: 'Mili:stack2009',
                feature_count: 10,
                info_format: 'text/javascript',
                format_options: 'callback:handleJson',
                SRS: 'EPSG: 32719',
                width: 101,
                height: 101,
                x: 50,
                y: 50,
                bbox: (coord[0]) + ',' + (coord[1])
            };
            var url = urlGeosrv + L.Util.getParamString(parameters);
            console.log(""url: "", url);
            $.ajax({
                url: urlGeosrv + L.Util.getParamString(parameters),
                dataType: 'jsonp',
                success: function (data) {
                    handleJson(data)
                }
            });

            */
        }
        var interaction = vector.getSource().getFeatures()[0];
        var ");
            WriteLiteral(@"newfeat = interaction.clone();
        var transform = newfeat.getGeometry().transform('EPSG:3857', ""EPSG:32719"");
        var coord = newfeat.getGeometry().getCoordinates();

        console.log(""coordenadas regresion: "", coord);
        var cX = (coord[0] - 0.1).toString();
        var cY = (coord[1] - 0.1).toString();
        var ccX = (coord[0] + 0.1).toString();
        var ccY = (coord[1] + 0.1).toString();
        console.log(cX, cY, ccX, ccY);
        console.log(""coordenadas regresion transform: "", transform);

        const proxyurl = ""https://cors-anywhere.herokuapp.com/"";
        var funk = proxyurl+""http://biovisionagricola.cl:8080/geoserver/Mili/wms?SERVICE=WMS&VERSION=1.1.1&REQUEST=GetFeatureInfo&FORMAT=image/jpeg&QUERY_LAYERS=Mili:et24stack2008&STYLES&LAYERS=Mili:et24stack2008&exceptions=application/vnd.ogc.se_inimage&INFO_FORMAT=application/json&FEATURE_COUNT=50&X=50&Y=50&SRS=EPSG:32719&WIDTH=101&HEIGHT=101&BBOX="" + cX + "","" + cY + "","" + ccX + "","" + ccY;    //263794.29767469596,6");
            WriteLiteral(@"017642.936587741,279217.292780405,6033065.931693451"";
        var valoresGeoserver = $.ajax({
            url: funk,
            dataType: 'json',
            error: function (jqXHR, exception) {
                var msg = '';
                if (jqXHR.status === 0) {
                    msg = 'Not connect.\n Verify Network.';
                } else if (jqXHR.status == 404) {
                    msg = 'Requested page not found. [404]';
                } else if (jqXHR.status == 500) {
                    msg = 'Internal Server Error [500].';
                } else if (exception === 'parsererror') {
                    msg = 'Requested JSON parse failed.';
                } else if (exception === 'timeout') {
                    msg = 'Time out error.';
                } else if (exception === 'abort') {
                    msg = 'Ajax request aborted.';
                } else {
                    msg = 'Uncaught Error.\n' + jqXHR.responseText;
                }
            },
           ");
            WriteLiteral(@" success: function (data) {
                console.log(""data desde geoserver: "", data),
                    console.log(""algo: "", data[""features""][0][""properties""].toString()),
                    console.log(JSON.stringify(data[""features""][0][""properties""])),
                    stringg = JSON.parse(JSON.stringify(data[""features""][0][""properties""]))

                values = Object.values(stringg);
                keys = Object.keys(stringg);

                for (i = 0; i < keys.length; i++) {
                    var s = keys[i].split(""."")[1];
                    //console.log(s);
                    var fecha1 = moment(s, ""DD-MM-YYYY"");
                    //console.log(fecha1);

                    //console.log(""doy: "", fecha1.dayOfYear());
                    keys[i] = fecha1.dayOfYear();
                }

                var yesy = [];
                for (i = 0; i < keys.length; i++) {
                    yesy[i] = {
                        doy: keys[i],
                      ");
            WriteLiteral(@"  valor: values[i]
                    };
                }
                console.log(""ahorasi: "", yesy);



                var ctx_live = document.getElementById(""line-chart"");

                var chart = new Chart(ctx_live, {
                    type: 'bar',
                    data: {
                        labels: [],
                        datasets: [
                            {
                                data: [],
                                label: ""ET24"",
                                fill: true,
                                backgroundColor: 'rgba(0, 119, 204, 0.3)'
                            },

                        ]
                    },
                    options: {
                        title: {
                            display: true,
                            text: 'Evapotranspiración diaria',
                            fontSize: 16
                        },
                        legend: {
                            position: '");
            WriteLiteral(@"top'
                        },
                        scales: {
                            xAxes: [{
                                ticks: {
                                    beginAtZero: true
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: 'DOY',
                                    fontSize: 16
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        },
                        plugins: {
                            zoom: {
                                // Container for pan options
                                pan: {
                                    // Boolean to enable panning
                                    e");
            WriteLiteral(@"nabled: true,

                                    // Panning directions. Remove the appropriate direction to disable
                                    // Eg. 'y' would only allow panning in the y direction
                                    mode: 'x'
                                },

                                // Container for zoom options
                                zoom: {
                                    // Boolean to enable zooming
                                    enabled: true,

                                    // Zooming directions. Remove the appropriate direction to disable
                                    // Eg. 'y' would only allow zooming in the y direction
                                    mode: 'x',
                                }
                            }
                        }
                    }
                });


                //console.log(""asd"" + regressionOutput[j][1]);

                var labels = keys;
               ");
            WriteLiteral(@" var datos = values;

                chart.data.labels = keys;
                chart.data.datasets[0].data = values;


                chart.update();

                Swal.fire({
                    icon: 'success',
                    title: 'Suma total',
                    text: 'Et24 ' + datos
                })




            }
        });
        /*
        var nFiguras = vector.getSource().getFeatures().length;
        if (nFiguras > 0) {

            var interaction = vector.getSource().getFeatures();
            interaction.forEach(async function (feature) {
                //var newgeo = feature;
                //newgeo.getGeometry().transform('EPSG:3857', ""EPSG:32719"");
                var newfeat = feature.clone();
                var transform = newfeat.getGeometry().transform('EPSG:3857', ""EPSG:32719"");
                var coord = newfeat.getGeometry().getCoordinates();

                //var workspace = layer.params.LAYERS.split(':');
                // var d");
            WriteLiteral(@"ownloadurl = ""http://localhost:8080/geoserver/"" + workspace[0] + ""/wcs?service=WCS&version=2.0.1&request=GetCoverage&CoverageId="" + layer.params.LAYERS + ""&format=image/tiff""
                //window.open(downloadurl);





                console.log(""poligono: "" + coord);
                //coord = ol.proj.transform(coord, 'EPSG:32719', 'EPSG:4326');

                //const img = await geoblaze.load(""https://citrads.biovisionagricola.cl/ET_24_reproj.tif"");
                //stackRaster 1vNUbsv5KXyvDBIYgWD_7pusdtOg6x8wh
                /*
    
                var linkEt24 = [];
    
    
                
                linkEt24[0] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbmxsN0Y2aGY5OGw4R0FXP2U9bWttWEFx/root/content"";
                linkEt24[1] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbnFQdzdJYXVNTGwwZEhqP2U9RXZ2RHNy/root/content"";
                linkEt24[2] = ""https://api.onedrive.com/v1.0/shares");
            WriteLiteral(@"/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbnVJbUxfVFd3Tjk1OEVmP2U9bXZCeTBz/root/content"";
                linkEt24[3] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbnhFV08zUk1qOVZzajF3P2U9SldyOU12/root/content"";
                linkEt24[4] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbjFaZGlid1phVWk3OXl6P2U9UmZKa0Fr/root/content"";
                linkEt24[5] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpbjZxbWoyMlJ3N1N4NnY1P2U9b0tSc2xB/root/content"";
                linkEt24[6] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpbjl4LXN3cGNZcnhNSGdNP2U9ZTRQWmxu/root/content"";
                linkEt24[7] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd0E1NnhiWjNkdTQ0UFVRP2U9VHZHbEZp/root/content"";
                linkEt24[8] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Z");
            WriteLiteral(@"pd0ZQdTA2UkF2TVI5NEttP2U9WFhmd0xC/root/content"";
                linkEt24[9] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd0xYckpqcVc0elhkNEtBP2U9bGN5WFVk/root/content"";
                linkEt24[10] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd053MV92dnh5QnZfYUxxP2U9eWV6TWhC/root/content"";
                linkEt24[11] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd1FFNVZjdlNyT21NZDRvP2U9eFk3bU54/root/content"";
                linkEt24[12] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd1ZJWDBYY2NUTlVfWUtJP2U9d1JFSnRj/root/content"";
                linkEt24[13] = ""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0Zpd1lFckdLNTFNbVZsVC1NP2U9OU5CM2gw/root/content"";
    
                
                var valores=[];
    
                for (m = 0; m < linkEt24.length; m++) {
                    const img = awa");
            WriteLiteral(@"it geoblaze.load(linkEt24[m]);
                    valores[m] = geoblaze.identify(img, coord);
                }
    
                console.log(""lista: ""+valores)
                */



                /*
                var url_to_geotiff_file = ""https://drive.google.com/u/0/uc?export=download&confirm=KkM4&id=1vNUbsv5KXyvDBIYgWD_7pusdtOg6x8wh"";
    
                const response = await fetch(""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpblpSTXlXNUxFX0MzNktqP2U9S1JJVmNv/root/content"");
                console.log(response);
                const arrayBuffer = await response.arrayBuffer();
                console.log(arrayBuffer);
                const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);
                console.log(tiff);
                */

                //const img = await geoblaze.load(""https://api.onedrive.com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBcUNSamZ4eFZrb0ZpblpSTXlXNUxFX0MzNktqP2U9S1JJVmNv/root/content"");
        /*
 ");
            WriteLiteral(@"               const img = await geoblaze.load(""http://localhost:8080/geoserver/localhost/wms?service=WMS&version=1.1.0&request=GetMap&layers=localhost:Ts&bbox=64051.700592833,4191661.52438661,195811.700592833,4308241.52438661&width=768&height=679&srs=EPSG:32611&format=image/geotiff"");
                var sumaaa = geoblaze.sum(img);
                console.log(""sm original: "", sumaaa);
                var lonlat = [223885.153852, 5786947.319458];
                var sum = geoblaze.identify(img, lonlat);
                console.log(""sm crop: "", sum);
                console.log(""img raster: "", img);

                var swissCoord = ol.proj.transform(lonlat, 'EPSG:4326', 'EPSG:32719');
                console.log(""transform: "", swissCoord)
                //swissCoord = ol.proj.transform(lonlat, 'EPSG:32719', 'EPSG:4326');
                console.log(""transform 4326: "", swissCoord)
                //swissCoord = ol.proj.transform(lonlat, 'EPSG:4326', 'EPSG:32719');
                console.log(""tra");
            WriteLiteral(@"nsform 4326 -> 32719: "", swissCoord)
                //swissCoord = ol.proj.transform(lonlat, 'EPSG:32719', 'EPSG:3857');
                console.log(""transform 3857: "", swissCoord)
                if (typeSelect.value === ""Point"") {
                    var suma = geoblaze.identify(img, coord);
                } else if (typeSelect.value === ""Polygon"") {
                    var suma = geoblaze.mean(img, coord);
                }


                console.log(""sm: "", suma);
                Swal.fire({
                    icon: 'success',
                    title: 'Resultado',
                    text: 'El valor del indicador seleccionado contenido en el polígono es: ' + suma
                })
                console.log(""sm: "", suma);

            });

        }
        else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'No hay figuras en el mapa.'
            })
        }*/
        
    }

    async function guar");
            WriteLiteral(@"darPoligono() {

        var poligono = vector.getSource().getFeatures()
        //vector.forEachFeature(function (feature) { geom.push(new ol.Feature(feature.getGeometry().clone())); });
        var writer = new ol.format.GeoJSON();
        var poly = writer.writeFeatures(poligono);
        console.log(poly);
        var idUsuario = ");
            EndContext();
            BeginContext(52895, 54, false);
#line 1204 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Home\Privacy.cshtml"
                   Write(HttpContextAccessor.HttpContext.Session.GetInt32("id"));

#line default
#line hidden
            EndContext();
            BeginContext(52949, 1032, true);
            WriteLiteral(@";
        const { value: nombre } = await Swal.fire({
            showCancelButton: true,
            title: 'Guardar polígono',
            input: 'text',
            cancelButtonText: `Cancelar`,
            cancelButtonColor: '#d33',
            inputPlaceholder: 'Ingresa un nombre',
            inputAttributes: {
                maxlength: 10,
                autocapitalize: 'off',
                autocorrect: 'off'
            }
        });
        if (idUsuario == null || poligono.length == 0 || nombre == null) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Faltan datos para guardar el polígono.'
            })
        }
        else {


            var data = {};
            data.IdAdmin = idUsuario;
            data.Coordenadas = poly;
            data.Nombre = nombre;
            console.log(JSON.stringify(data));

            $.ajax(
                {
                    type: ""POST"",
                  ");
            WriteLiteral("  url: \'");
            EndContext();
            BeginContext(53982, 46, false);
#line 1237 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Home\Privacy.cshtml"
                     Write(Url.Action("EnviarDatosPoligono", "AgroDatos"));

#line default
#line hidden
            EndContext();
            BeginContext(54028, 1983, true);
            WriteLiteral(@"',
                    data: JSON.stringify(data),
                    dataType: ""json"",
                    contentType: ""application/json; charset=utf-8"",
                    error: function (jqXHR, exception) {
                        var msg = '';
                        if (jqXHR.status === 0) {
                            msg = 'Not connect.\n Verify Network.';
                        } else if (jqXHR.status == 404) {
                            msg = 'Requested page not found. [404]';
                        } else if (jqXHR.status == 500) {
                            msg = 'Internal Server Error [500].';
                        } else if (exception === 'parsererror') {
                            msg = 'Requested JSON parse failed.';
                        } else if (exception === 'timeout') {
                            msg = 'Time out error.';
                        } else if (exception === 'abort') {
                            msg = 'Ajax request aborted.';
                   ");
            WriteLiteral(@"     } else {
                            msg = 'Uncaught Error.\n' + jqXHR.responseText;
                        }
                        Swal.fire({
                            icon: 'error',
                            title: 'Resultado',
                            text: '' + msg
                        })
                        //alert(""error"");
                        //console.log(msg);
                    },
                    success: function () {

                        Swal.fire({
                            icon: 'success',
                            title: 'Éxito',
                            text: 'Polígono guardado correctamente.'
                        })
                    }
                });
        }
    }

    async function cargarPoligono() {

        var poligonos = {};
        var len = 0;




        await $.ajax(
            {
                type: ""GET"",
                url: '");
            EndContext();
            BeginContext(56012, 46, false);
#line 1289 "C:\Users\Zerling\Documents\UTAL\2020-1\Citra\New\Git2\CitraDS\Views\Home\Privacy.cshtml"
                 Write(Url.Action("CargarDatosPoligono", "AgroDatos"));

#line default
#line hidden
            EndContext();
            BeginContext(56058, 3388, true);
            WriteLiteral(@"',
                data: {},
                dataType: ""json"",
                contentType: ""application/json; charset=utf-8"",
                error: function (jqXHR, exception) {
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
  ");
            WriteLiteral(@"                  }
                    Swal.fire({
                        icon: 'error',
                        title: 'Resultado',
                        text: '' + msg
                    })
                    //alert(""error"");
                    //console.log(msg);
                },
                success: function (data) {
                    console.log(""objetcta.values(data)"", Object.values(data));
                    console.log(""cantidad de entradas: "", Object.values(data).length);






                    //console.log(new ol.format.GeoJSON().readFeatures(data[0].coordenadas)[0]);
                    //source.addFeature(new ol.format.GeoJSON().readFeatures(data[0].coordenadas)[0]);
                    poligonos = data;
                    len = Object.values(data).length;
                }
            }); 
        console.log(""len: "" + len);
        var inputOptions = {}; // Define like this!
        for (var i = 0; i < len; i++)
        {
            inputOptions");
            WriteLiteral(@"[i] = poligonos[i].nombre;
            //console.log(new ol.format.GeoJSON().readFeatures((poligonos[i].coordenadas)[0]));
            //console.log(new ol.format.GeoJSON().readFeatures((poligonos[i].nombre)[0]));
        }



        const { value: pol } = await Swal.fire({
            title: 'Carga de polígonos guardados',
            input: 'select',
            inputOptions: inputOptions,
            inputPlaceholder: 'Elige un polígono',
            showCancelButton: true,
            inputValidator: (value) => {
                return new Promise((resolve) => {
                    resolve()
                })
            }
        })

        if (pol) {
            Swal.fire({
                icon: 'success',
                title: 'Éxito',
                text: 'Polígono cargado correctamente.'
            });
            console.log(new ol.format.GeoJSON().readFeatures(poligonos[0].coordenadas)[0]);
            source.addFeature(new ol.format.GeoJSON().readFeatures(poligonos");
            WriteLiteral(@"[pol].coordenadas)[0]);
        }

        //var features = new ol.format.GeoJSON().readFeatures(poligonos[0].Coordenadas);

        
    }








</script>



<style>
    * {
        box-sizing: border-box;
    }

    .map {
        height: 100%;
        width: 100%;
    }
</style>

");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
